// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/iscream_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cpp_query_all
Rcpp::List Cpp_query_all(std::vector<std::string>& bedfiles, std::vector<std::string>& regions, const bool bismark, const bool merged, const bool sparse, const int nthreads);
RcppExport SEXP _iscream_Cpp_query_all(SEXP bedfilesSEXP, SEXP regionsSEXP, SEXP bismarkSEXP, SEXP mergedSEXP, SEXP sparseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type bedfiles(bedfilesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< const bool >::type bismark(bismarkSEXP);
    Rcpp::traits::input_parameter< const bool >::type merged(mergedSEXP);
    Rcpp::traits::input_parameter< const bool >::type sparse(sparseSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_query_all(bedfiles, regions, bismark, merged, sparse, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// get_omp_threads
int get_omp_threads(bool verbose);
RcppExport SEXP _iscream_get_omp_threads(SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omp_threads(verbose));
    return rcpp_result_gen;
END_RCPP
}
// setup_logger
void setup_logger(std::string logname);
RcppExport SEXP _iscream_setup_logger(SEXP lognameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type logname(lognameSEXP);
    setup_logger(logname);
    return R_NilValue;
END_RCPP
}
// Cpp_set_log_level
void Cpp_set_log_level(const std::string& name);
RcppExport SEXP _iscream_Cpp_set_log_level(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Cpp_set_log_level(name);
    return R_NilValue;
END_RCPP
}
// get_log_level
std::string get_log_level();
RcppExport SEXP _iscream_get_log_level() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_log_level());
    return rcpp_result_gen;
END_RCPP
}
// query_chroms
std::vector<std::string> query_chroms(const std::string& fname);
RcppExport SEXP _iscream_query_chroms(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(query_chroms(fname));
    return rcpp_result_gen;
END_RCPP
}
// Cpp_region_map
Rcpp::DataFrame Cpp_region_map(const std::vector<std::string>& bedfiles, const Rcpp::CharacterVector& regions, const std::string& fun, const bool mval, const bool bismark, const bool region_rownames, const int& nthreads);
RcppExport SEXP _iscream_Cpp_region_map(SEXP bedfilesSEXP, SEXP regionsSEXP, SEXP funSEXP, SEXP mvalSEXP, SEXP bismarkSEXP, SEXP region_rownamesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type bedfiles(bedfilesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const bool >::type mval(mvalSEXP);
    Rcpp::traits::input_parameter< const bool >::type bismark(bismarkSEXP);
    Rcpp::traits::input_parameter< const bool >::type region_rownames(region_rownamesSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_region_map(bedfiles, regions, fun, mval, bismark, region_rownames, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iscream_Cpp_query_all", (DL_FUNC) &_iscream_Cpp_query_all, 6},
    {"_iscream_get_omp_threads", (DL_FUNC) &_iscream_get_omp_threads, 1},
    {"_iscream_setup_logger", (DL_FUNC) &_iscream_setup_logger, 1},
    {"_iscream_Cpp_set_log_level", (DL_FUNC) &_iscream_Cpp_set_log_level, 1},
    {"_iscream_get_log_level", (DL_FUNC) &_iscream_get_log_level, 0},
    {"_iscream_query_chroms", (DL_FUNC) &_iscream_query_chroms, 1},
    {"_iscream_Cpp_region_map", (DL_FUNC) &_iscream_Cpp_region_map, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_iscream(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
