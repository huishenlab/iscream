---
title: "Getting started with iscream"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Getting started with iscream}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
#bibliography: refs.bib
link-citations: yes
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## Setup

### Loading *iscream*

The number of threads can be set before or after loading the library:

```{r}
options("iscream.threads" = 8)
library(iscream)
```

### Input bedifiles

I'm using 100 human cell data from the snmc-seq2 dataset in this vignette:

```{r}
bedfiles <- list.files(
    "../data/k562/",
    pattern = "*_mergecg.bed.gz$",
    full.names = TRUE
)
```
### Regions

Since *iscream* is a region-based querying tool, we need to load some regions.
Here we'll be using gene body regions as the input:

```{r}
library(data.table)
regions <- fread("../data/genes.bed", col.names = c("chr", "start", "end", "gene"))
head(regions)
```

## Running iscream

### Make tabix queries

The `tabix()` function can be used to query regions from BED files much like the
*tabix* shell command. It returns the queried lines from the BED files, parsed
into columns, as a `data.table`. `tabix()` is a generic BED files query function
and is not restricted to methylation BED files. It has built-in support for
BISCUIT, Bismark, and BSbolt BED file column names, set with the `aligner`
argument, but can take other column names with the `colnames` argument.

If multiple input files are provided, they are queried in parallel. If `raw =
TRUE`, `tabix()` will return the same data as `Rsamtools::scanTabix()` does - a
named list of strings.

```{r}
tabix(bedfiles, regions[1:50])
```

### Get summary data

To get a summary of the methylation information of the gene bodies we use
`summarize_regions`:

```{r}
head(summarize_regions(bedfiles[1:8], regions))
```

### Build matrices

```{r}
meth_mat <- query_all(bedfiles, regions, sparse = TRUE)
str(meth_mat)
```

The output of query_all is a named list containing matrices of coverage values
and M values and vectors of the sample names, chromosome names and positions of
the loci.

This list can be used to produce a BSseq object. However since BSseq cannot work
with sparse matrices, the two matrices would need to be converted to dense
matrices first.


```{r, eval = FALSE}
bs <- do.call(BSseq, meth_mat)
```

## Session info

```{r session}
sessionInfo()
```

<!-- vim: set filetype=rmd: -->
