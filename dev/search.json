[{"path":"https://huishenlab.github.io/iscream/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 iscream authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Plotting TSS methylation profiles","text":"","code":"options(\"iscream.threads\" = 8) library(iscream) library(data.table) library(ggplot2)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"download-the-data","dir":"Articles","previous_headings":"","what":"Download the data","title":"Plotting TSS methylation profiles","text":"Running vignette requires downloading 18MB BED files tabix indices Zenodo record: https://zenodo.org/records/14733834 First, generate list BED file paths:","code":"methscan_zip_path <- tempfile(\"methscan\") methscan_dir <- tempdir() download.file(     \"https://zenodo.org/records/14733834/files/methscan_data.zip\",     destfile = methscan_zip_path ) unzip(methscan_zip_path, exdir = methscan_dir) start_time = proc.time() data_dir <- paste0(methscan_dir, \"/scbs_tutorial_data\") bedfiles <- list.files(     data_dir,     pattern = \"*.cov.gz$\",     full.names = TRUE )"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"get-the-transcription-start-sites-and-flanking-regions","dir":"Articles","previous_headings":"","what":"Get the Transcription start sites and flanking regions","title":"Plotting TSS methylation profiles","text":"read provided TSS BED file create 2kb flanking regions around start sites.","code":"tss.regions <- fread(     paste0(data_dir, \"/Mus_musculus.GRCm38.102_TSS.bed\"), drop = c(3, 5, 6) ) colnames(tss.regions) <- c(\"chr\", \"tss\", \"geneID\") head(tss.regions) ##       chr     tss             geneID ##    <char>   <int>             <char> ## 1:      1 3671498 ENSMUSG00000051951 ## 2:      1 4409241 ENSMUSG00000025900 ## 3:      1 4496413 ENSMUSG00000025902 ## 4:      1 4785739 ENSMUSG00000033845 ## 5:      1 4807823 ENSMUSG00000025903 ## 6:      1 4857814 ENSMUSG00000033813 tss.regions[, `:=`(tss.start = tss - 2000, tss.end = tss + 2000)]  # make a new data frame with chr, start, end as iscream requires these columns tss.for_query <- tss.regions[, .(chr, start = tss.start, end = tss.end)]"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"make-a-tabix-query-of-the-tss-flanking-regions","dir":"Articles","previous_headings":"","what":"Make a tabix query of the TSS flanking regions","title":"Plotting TSS methylation profiles","text":"tabix() function queries provided BED files TSS flanking regions produce data frame:","code":"query_runtime.start <- proc.time() tss.query <- tabix(bedfiles, tss.for_query, aligner = \"bismark\") head(tss.query) ##       chr   start     end methylation.percentage count.methylated ##    <char>   <int>   <int>                  <num>            <int> ## 1:      1 4785488 4785488                      0                0 ## 2:      1 4785513 4785513                      0                0 ## 3:      1 4785522 4785522                      0                0 ## 4:      1 4785533 4785533                      0                0 ## 5:      1 4786780 4786780                    100                1 ## 6:      1 4786886 4786886                    100                1 ##    count.unmethylated  sample ##                 <int>  <char> ## 1:                  2 cell_01 ## 2:                  2 cell_01 ## 3:                  2 cell_01 ## 4:                  2 cell_01 ## 5:                  0 cell_01 ## 6:                  0 cell_01"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"summarize-average-methylation-profile-around-tss","dir":"Articles","previous_headings":"","what":"Summarize average methylation profile around TSS","title":"Plotting TSS methylation profiles","text":"Given CpG level methylation data frame, now join queried data based CpGs fall within TSS flanking regions get CpGs 2kb around TSS. can also set new position column relative TSS (using rounded values methscan tutorial): Time make query compute summary: 3.389s elapsed (53.1s cpu).","code":"# join tss.profile <- tss.regions[tss.query, .(     chr,     start,     position = round(start - tss, -1L),     methylation.percentage,     file   ),   on = .(chr, tss.start <= start, tss.end >= end) ] |> unique()  # get mean methylation by relative position and cell tss.summary <- tss.profile[,   .(meth_frac = mean(methylation.percentage/100)),   by = .(position, file) ]  query_runtime <- timetaken(query_runtime.start)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"plot-average-methylation-profiles-around-the-tss","dir":"Articles","previous_headings":"","what":"Plot average methylation profiles around the TSS","title":"Plotting TSS methylation profiles","text":"TSS profiles Total runtime, getting bedfiles regions making query, calculating summaries plotting: 3.458s elapsed (53.2s cpu). methscan, generating TSS methylation profiles alone took 11 seconds.","code":"tss.plot <- ggplot(tss.summary, aes(x = position / 1000, y = meth_frac)) +   scale_y_continuous(     labels=scales::percent_format(accuracy=1),     limits=c(0, 1), breaks=c(0, .5, 1)   ) +   geom_line(linewidth = .1) +   facet_wrap(~file) +   labs(x = \"position relative to TSS [kb]\", y = \"DNA methylation\")  total_runtime <- timetaken(start_time)  tss.plot"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"using-summarize_regions","dir":"Articles","previous_headings":"","what":"Using summarize_regions","title":"Plotting TSS methylation profiles","text":"similar analysis can done using summarize_regions() function need see distribution beta means sample, rather means relative position per sample. TSS distribution sample per-sample means collapse means within samples: Mean TSS sample","code":"library(\"ggridges\") tss.means <- summarize_meth_regions(   bedfiles,   tss.for_query,   aligner = \"bismark\",   fun = \"mean\",   mval = FALSE ) |> as.data.table() ## [11:26:01.827829] [iscream::summarize_regions] [info] Summarizing 21622 regions from 30 bedfiles ## [11:26:01.827888] [iscream::summarize_regions] [info] using mean ## [11:26:01.827894] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, beta ggplot(tss.means, aes(x = beta.mean, y = file, fill = after_stat(x))) +   geom_density_ridges_gradient() +   scale_fill_distiller(palette = \"BrBG\") +   theme_classic() tss.means[, .(beta.mean = mean(beta.mean, na.rm = TRUE)), by = file] |>   ggplot(     aes(       x = reorder(file, beta.mean),       y = beta.mean,       fill = beta.mean)     ) +   geom_bar(stat = 'identity') +   scale_fill_viridis_c() +   theme_classic() +   coord_flip() +   labs(x = \"Sample\")"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Plotting TSS methylation profiles","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: AlmaLinux 9.5 (Teal Serval) ##  ## Matrix products: default ## BLAS/LAPACK: /usr/lib64/libopenblas-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.utf8        LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.utf8      LC_MONETARY=C.UTF-8    LC_MESSAGES=C.utf8     ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggridges_0.5.6     ggplot2_3.5.1      data.table_1.17.0  iscream_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5         cli_3.6.4           knitr_1.50          ##  [4] rlang_1.1.5         xfun_0.51           generics_0.1.3      ##  [7] labeling_0.4.3      RcppParallel_5.1.10 glue_1.8.0          ## [10] colorspace_2.1-1    stringfish_0.16.0   scales_1.3.0        ## [13] grid_4.4.2          evaluate_1.0.3      munsell_0.5.1       ## [16] tibble_3.2.1        lifecycle_1.0.4     compiler_4.4.2      ## [19] dplyr_1.1.4         RColorBrewer_1.1-3  Rcpp_1.0.14         ## [22] pkgconfig_2.0.3     farver_2.1.2        lattice_0.22-6      ## [25] viridisLite_0.4.2   R6_2.6.1            tidyselect_1.2.1    ## [28] pillar_1.10.1       parallelly_1.43.0   parallel_4.4.2      ## [31] magrittr_2.0.3      Matrix_1.7-3        withr_3.0.2         ## [34] tools_4.4.2         gtable_0.3.6"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"granges","dir":"Articles","previous_headings":"","what":"GRanges","title":"Getting other data structures from iscream","text":"GRanges can used input iscream’s querying functions. output tabix() make_mat(), make_bsseq_mat() can also turned GRanges.","code":"library(GenomicRanges)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-tabix-queries","dir":"Articles","previous_headings":"GRanges","what":"From tabix queries","title":"Getting other data structures from iscream","text":"input already GRanges object, tabix() also return GRanges object along attached metadata. tabix() uses input findOverlaps() join input metadata queried data. input BED file zero-based (e.g. Bismark coverage files), set zero_based = FALSE tabix() call get correct conversion data frame GenomicRanges.","code":"tabix(bedfiles[1], regions) |> GRanges() ## GRanges object with 7 ranges and 2 metadata columns: ##       seqnames    ranges strand |        V1        V2 ##          <Rle> <IRanges>  <Rle> | <numeric> <integer> ##   [1]     chr1       0-2      * |       1.0         1 ##   [2]     chr1       2-4      * |       1.0         1 ##   [3]     chr1       4-6      * |       0.0         2 ##   [4]     chr1       6-8      * |       0.0         1 ##   [5]     chr1      8-10      * |       0.5         2 ##   [6]     chr1     10-12      * |       1.0         2 ##   [7]     chr1     12-14      * |       1.0         3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths gr <- GRanges(regions) values(gr) <- DataFrame(     gene = c(\"gene1\", \"gene2\", \"gene3\"),     some_metadata = c(\"s1\", \"s2\", \"s3\") ) gr ## GRanges object with 3 ranges and 2 metadata columns: ##     seqnames    ranges strand |        gene some_metadata ##        <Rle> <IRanges>  <Rle> | <character>   <character> ##   A     chr1       1-6      * |       gene1            s1 ##   B     chr1      7-10      * |       gene2            s2 ##   C     chr1     11-14      * |       gene3            s3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths tabix(bedfiles, gr) ## GRanges object with 20 ranges and 5 metadata columns: ##        seqnames    ranges strand |        V1        V2        file        gene ##           <Rle> <IRanges>  <Rle> | <numeric> <integer> <character> <character> ##    [1]     chr1       1-2      * |       1.0         1           a       gene1 ##    [2]     chr1       3-4      * |       1.0         1           a       gene1 ##    [3]     chr1       5-6      * |       0.0         2           a       gene1 ##    [4]     chr1       7-8      * |       0.0         1           a       gene2 ##    [5]     chr1      9-10      * |       0.5         2           a       gene2 ##    ...      ...       ...    ... .       ...       ...         ...         ... ##   [16]     chr1       1-2      * |       1.0         1           d       gene1 ##   [17]     chr1       3-4      * |       1.0         2           d       gene1 ##   [18]     chr1       7-8      * |       0.0         1           d       gene2 ##   [19]     chr1      9-10      * |       0.5         2           d       gene2 ##   [20]     chr1     13-14      * |       1.0         1           d       gene3 ##        some_metadata ##          <character> ##    [1]            s1 ##    [2]            s1 ##    [3]            s1 ##    [4]            s2 ##    [5]            s2 ##    ...           ... ##   [16]            s1 ##   [17]            s1 ##   [18]            s2 ##   [19]            s2 ##   [20]            s3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-summarize_regions","dir":"Articles","previous_headings":"GRanges","what":"From summarize_regions","title":"Getting other data structures from iscream","text":"named set regions, ’ll need set_region_rownames input create GRanges object: regions vector named, pass feature column GRanges input regions:","code":"(summary <- summarize_meth_regions(   bedfiles,   regions,   set_region_rownames = TRUE,   fun = c(\"sum\", \"mean\")) ) ## [19:13:31.075861] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles ## [19:13:31.075910] [iscream::summarize_regions] [info] using sum, mean ## [19:13:31.075914] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, M ##            feature file coverage.sum M.sum coverage.mean    M.mean ## chr1:1-6         A    a            4     2      1.333333 0.6666667 ## chr1:7-10        B    a            3     1      1.500000 0.5000000 ## chr1:11-14       C    a            5     5      2.500000 2.5000000 ## chr1:1-6         A    b            4     2      2.000000 1.0000000 ## chr1:7-10        B    b            1     1      1.000000 1.0000000 ## chr1:11-14       C    b            3     1      1.500000 0.5000000 ## chr1:1-6         A    c            2     2      2.000000 2.0000000 ## chr1:7-10        B    c            3     1      1.500000 0.5000000 ## chr1:11-14       C    c           NA    NA            NA        NA ## chr1:1-6         A    d            3     3      1.500000 1.5000000 ## chr1:7-10        B    d            3     1      1.500000 0.5000000 ## chr1:11-14       C    d            1     1      1.000000 1.0000000 GRanges(rownames(summary), summary = summary) ## GRanges object with 12 ranges and 6 metadata columns: ##        seqnames    ranges strand | summary.feature summary.file ##           <Rle> <IRanges>  <Rle> |     <character>  <character> ##    [1]     chr1       1-6      * |               A            a ##    [2]     chr1      7-10      * |               B            a ##    [3]     chr1     11-14      * |               C            a ##    [4]     chr1       1-6      * |               A            b ##    [5]     chr1      7-10      * |               B            b ##    ...      ...       ...    ... .             ...          ... ##    [8]     chr1      7-10      * |               B            c ##    [9]     chr1     11-14      * |               C            c ##   [10]     chr1       1-6      * |               A            d ##   [11]     chr1      7-10      * |               B            d ##   [12]     chr1     11-14      * |               C            d ##        summary.coverage.sum summary.M.sum summary.coverage.mean summary.M.mean ##                   <numeric>     <numeric>             <numeric>      <numeric> ##    [1]                    4             2               1.33333       0.666667 ##    [2]                    3             1               1.50000       0.500000 ##    [3]                    5             5               2.50000       2.500000 ##    [4]                    4             2               2.00000       1.000000 ##    [5]                    1             1               1.00000       1.000000 ##    ...                  ...           ...                   ...            ... ##    [8]                    3             1                   1.5            0.5 ##    [9]                   NA            NA                    NA             NA ##   [10]                    3             3                   1.5            1.5 ##   [11]                    3             1                   1.5            0.5 ##   [12]                    1             1                   1.0            1.0 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths (summary <- summarize_meth_regions(   bedfiles,   unname(regions),   fun = c(\"sum\", \"mean\")) ) ## [19:13:31.188139] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles ## [19:13:31.188164] [iscream::summarize_regions] [info] using sum, mean ## [19:13:31.188168] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, M ##       feature file coverage.sum M.sum coverage.mean    M.mean ## 1    chr1:1-6    a            4     2      1.333333 0.6666667 ## 2   chr1:7-10    a            3     1      1.500000 0.5000000 ## 3  chr1:11-14    a            5     5      2.500000 2.5000000 ## 4    chr1:1-6    b            4     2      2.000000 1.0000000 ## 5   chr1:7-10    b            1     1      1.000000 1.0000000 ## 6  chr1:11-14    b            3     1      1.500000 0.5000000 ## 7    chr1:1-6    c            2     2      2.000000 2.0000000 ## 8   chr1:7-10    c            3     1      1.500000 0.5000000 ## 9  chr1:11-14    c           NA    NA            NA        NA ## 10   chr1:1-6    d            3     3      1.500000 1.5000000 ## 11  chr1:7-10    d            3     1      1.500000 0.5000000 ## 12 chr1:11-14    d            1     1      1.000000 1.0000000 GRanges(summary$feature, summary = summary[, -1]) ## GRanges object with 12 ranges and 5 metadata columns: ##        seqnames    ranges strand | summary.file summary.coverage.sum ##           <Rle> <IRanges>  <Rle> |  <character>            <numeric> ##    [1]     chr1       1-6      * |            a                    4 ##    [2]     chr1      7-10      * |            a                    3 ##    [3]     chr1     11-14      * |            a                    5 ##    [4]     chr1       1-6      * |            b                    4 ##    [5]     chr1      7-10      * |            b                    1 ##    ...      ...       ...    ... .          ...                  ... ##    [8]     chr1      7-10      * |            c                    3 ##    [9]     chr1     11-14      * |            c                   NA ##   [10]     chr1       1-6      * |            d                    3 ##   [11]     chr1      7-10      * |            d                    3 ##   [12]     chr1     11-14      * |            d                    1 ##        summary.M.sum summary.coverage.mean summary.M.mean ##            <numeric>             <numeric>      <numeric> ##    [1]             2               1.33333       0.666667 ##    [2]             1               1.50000       0.500000 ##    [3]             5               2.50000       2.500000 ##    [4]             2               2.00000       1.000000 ##    [5]             1               1.00000       1.000000 ##    ...           ...                   ...            ... ##    [8]             1                   1.5            0.5 ##    [9]            NA                    NA             NA ##   [10]             3                   1.5            1.5 ##   [11]             1                   1.5            0.5 ##   [12]             1                   1.0            1.0 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"making-summarizedexperiment-objects","dir":"Articles","previous_headings":"","what":"Making SummarizedExperiment objects","title":"Getting other data structures from iscream","text":"","code":"library(\"SummarizedExperiment\")"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-make_mat-or-make_bsseq_mat-matrices","dir":"Articles","previous_headings":"Making SummarizedExperiment objects","what":"From make_mat() or make_bsseq_mat() matrices","title":"Getting other data structures from iscream","text":"","code":"(mats <- make_bsseq_mat(bedfiles, regions)) ## [19:13:33.557280] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles ##  ## [19:13:33.557647] [iscream::query_all] [info] Creating metadata vectors ## [19:13:33.557685] [iscream::query_all] [info] 7 loci found - 9993 extra rows allocated with 0 resizes ## [19:13:33.557689] [iscream::query_all] [info] Creating dense matrix ## $M ##      a b c d ## [1,] 1 0 0 1 ## [2,] 1 0 2 2 ## [3,] 0 2 0 0 ## [4,] 0 1 0 0 ## [5,] 1 0 1 1 ## [6,] 2 0 0 0 ## [7,] 3 1 0 1 ##  ## $Cov ##      a b c d ## [1,] 1 2 0 1 ## [2,] 1 0 2 2 ## [3,] 2 2 0 0 ## [4,] 1 1 2 1 ## [5,] 2 0 1 2 ## [6,] 2 2 0 0 ## [7,] 3 1 0 1 ##  ## $pos ## [1]  0  2  4  6  8 10 12 ##  ## $chr ## [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" ##  ## $sampleNames ## [1] \"a\" \"b\" \"c\" \"d\" (mats.sparse <- make_bsseq_mat(bedfiles, regions, sparse = TRUE)) ## [19:13:33.558741] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles ##  ## [19:13:33.559021] [iscream::query_all] [info] Creating metadata vectors ## [19:13:33.559036] [iscream::query_all] [info] 7 loci found - 9993 extra rows allocated with 0 resizes ## [19:13:33.559044] [iscream::query_all] [info] Creating sparse matrix ## $M ## 7 x 4 sparse Matrix of class \"dgCMatrix\" ##      a b c d ## [1,] 1 . . 1 ## [2,] 1 . 2 2 ## [3,] . 2 . . ## [4,] . 1 . . ## [5,] 1 . 1 1 ## [6,] 2 . . . ## [7,] 3 1 . 1 ##  ## $Cov ## 7 x 4 sparse Matrix of class \"dgCMatrix\" ##      a b c d ## [1,] 1 2 . 1 ## [2,] 1 . 2 2 ## [3,] 2 2 . . ## [4,] 1 1 2 1 ## [5,] 2 . 1 2 ## [6,] 2 2 . . ## [7,] 3 1 . 1 ##  ## $pos ## [1]  0  2  4  6  8 10 12 ##  ## $chr ## [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" ##  ## $sampleNames ## [1] \"a\" \"b\" \"c\" \"d\" gr <- GRanges(mats$chr, mats$pos)  # dense SummarizedExperiment(assays = list(M = mats$M, Cov = mats$Cov), rowRanges = gr) ## class: RangedSummarizedExperiment  ## dim: 7 4  ## metadata(0): ## assays(2): M Cov ## rownames: NULL ## rowData names(0): ## colnames(4): a b c d ## colData names(0): # sparse SummarizedExperiment(   assays = list(M = mats.sparse$M, Cov = mats.sparse$Cov),   rowRanges = gr ) ## class: RangedSummarizedExperiment  ## dim: 7 4  ## metadata(0): ## assays(2): M Cov ## rownames: NULL ## rowData names(0): ## colnames(4): a b c d ## colData names(0):"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"making-bsseq-objects","dir":"Articles","previous_headings":"","what":"Making BSseq objects","title":"Getting other data structures from iscream","text":"BSseq object type SummarizedExperiment, handle sparse matrices:","code":"library(bsseq) do.call(BSseq, mats)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Getting other data structures from iscream","text":"","code":"sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SummarizedExperiment_1.38.1 Biobase_2.68.0              ##  [3] MatrixGenerics_1.20.0       matrixStats_1.5.0           ##  [5] GenomicRanges_1.60.0        GenomeInfoDb_1.44.0         ##  [7] IRanges_2.42.0              S4Vectors_0.46.0            ##  [9] BiocGenerics_0.54.0         generics_0.1.4              ## [11] iscream_0.1.0.9000          ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.10             SparseArray_1.8.0       lattice_0.22-7          ##  [4] digest_0.6.37           evaluate_1.0.4          grid_4.5.1              ##  [7] fastmap_1.2.0           jsonlite_2.0.0          Matrix_1.7-3            ## [10] httr_1.4.7              UCSC.utils_1.4.0        textshaping_1.0.1       ## [13] jquerylib_0.1.4         abind_1.4-8             cli_3.6.5               ## [16] rlang_1.1.6             crayon_1.5.3            XVector_0.48.0          ## [19] parallelly_1.45.0       cachem_1.1.0            DelayedArray_0.34.1     ## [22] yaml_2.3.10             S4Arrays_1.8.1          tools_4.5.1             ## [25] parallel_4.5.1          GenomeInfoDbData_1.2.14 R6_2.6.1                ## [28] lifecycle_1.0.4         fs_1.6.6                stringfish_0.16.0       ## [31] ragg_1.4.0              desc_1.4.3              pkgdown_2.1.3           ## [34] RcppParallel_5.1.10     bslib_0.9.0             data.table_1.17.6       ## [37] Rcpp_1.1.0              systemfonts_1.2.3       xfun_0.52               ## [40] knitr_1.50              htmltools_0.5.8.1       rmarkdown_2.29          ## [43] compiler_4.5.1"},{"path":"https://huishenlab.github.io/iscream/dev/articles/htslib.html","id":"condaminicondamambamicromamba","dir":"Articles","previous_headings":"","what":"Conda/miniconda/mamba/micromamba","title":"Getting htslib headers","text":"Create environment.yaml following contents install htslib 1.21: Add file project directory run Confirm headers available compilation get something like","code":"name: iscream channels:   - bioconda   - conda-forge dependencies:   - htslib=1.21   - pkg-config=0.29.2 conda env create -f environment.yaml conda activate iscream export PKG_CONFIG_PATH=$CONDA_PREFIX/lib export LD_LIBRARY_PATH=$CONDA_PREFIX/lib/ pkg-config --cflags --libs htslib -I/home/user/miniconda3/envs/iscream/include -L/home/user/miniconda3/envs/iscream/lib -lhts"},{"path":"https://huishenlab.github.io/iscream/dev/articles/htslib.html","id":"pixi","dir":"Articles","previous_headings":"","what":"Pixi","title":"Getting htslib headers","text":"Pixi uses conda repositories install packages. Create pixi.toml file content add file project directory: create environment required system dependencies run Confirm headers available compilation get something like","code":"[project] channels = [\"conda-forge\", \"bioconda\"] name = \"iscream\" platforms = [\"linux-64\"] version = \"0.1.0\"  [activation.env] LD_LIBRARY_PATH=\"$CONDA_PREFIX/lib\"  [dependencies] htslib = \"1.21.*\" pkg-config = \">=0.29.2,<0.30\" pixi shell pkg-config --cflags --libs htslib -I/home/user/iscream/.pixi/envs/default/include -L/home/user/iscream/.pixi/envs/default/lib -lhts"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"loading-iscream","dir":"Articles","previous_headings":"Setup","what":"Loading iscream","title":"Getting started with iscream","text":"number threads can set loading library:","code":"options(\"iscream.threads\" = 8) library(iscream) #> iscream using 8 threads based on 'options(iscream.threads)'  #> but parallelly::availableCores() detects 16 possibly available threads. #> See `?set_threads` for information on multithreading before trying to use more."},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"input-bed-files","dir":"Articles","previous_headings":"Setup","what":"Input BED files","title":"Getting started with iscream","text":"Running vignette requires downloading 2GB single-cell whole genome bisulfite sequencing (WGBS) BED files tabix indices Zenodo record: https://zenodo.org/records/14733834. 100 human cell WGBS data snmc-seq2 dataset:","code":"snmc_zip_path <- tempfile(\"snmcseq2\") snmc_dir <- tempdir() download.file(     \"https://zenodo.org/records/14733834/files/sc_beds.zip\",     destfile = snmc_zip_path ) unzip(snmc_zip_path, exdir = snmcseq2_dir)  genes_file <- tempfile(\"genes\") download.file(     \"https://zenodo.org/records/14733834/files/genes.bed\",     destfile = genes_file ) bedfiles <- list.files(   snmc_dir,   pattern = \"*.bed.gz$\",   full.names = TRUE )[1:100]"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"regions","dir":"Articles","previous_headings":"Setup","what":"Regions","title":"Getting started with iscream","text":"Since iscream region-based querying tool, need load regions. ’ll using 5000 gene body regions input:","code":"library(data.table) regions <- fread(   genes_file,   col.names = c(\"chr\", \"start\", \"end\", \"gene\") )[1:5000] head(regions) #>       chr    start      end   gene #>    <char>    <int>    <int> <char> #> 1:   chr1  1471764  1497848 ATAD3B #> 2:   chr1  3069167  3438621 PRDM16 #> 3:   chr1  2403963  2413797  PEX10 #> 4:   chr1 10472287 10630758  PEX14 #> 5:   chr1  2425979  2505532  PLCH2 #> 6:   chr1  9292893  9369532  SPSB1"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"make-tabix-queries","dir":"Articles","previous_headings":"Running iscream","what":"Make tabix queries","title":"Getting started with iscream","text":"tabix() function can used query regions BED files much like tabix shell command. returns queried lines BED files, parsed columns, data.table. tabix() generic BED files query function. support BISCUIT, Bismark, BSBolt aligners, set aligner argument, correctly set column names output. multiple input files provided, queried parallel. raw = TRUE, tabix() return data Rsamtools::scanTabix() - named list strings. large queries, tabix() may currently seem unresponsive, progress bar development show progress.","code":"system.time(tbx_query <- tabix(bedfiles, regions, col.names = c(\"beta\", \"coverage\"))) #>    user  system elapsed  #>  29.272   7.398  10.178 tbx_query #>              chr     start       end  beta coverage            file #>           <char>     <int>     <int> <num>    <int>          <char> #>        1:   chr1    923949    923950 0.000        1 bisc_SRR6911624 #>        2:   chr1    923953    923954 0.000        1 bisc_SRR6911624 #>        3:   chr1    923959    923960 0.000        1 bisc_SRR6911624 #>        4:   chr1    923971    923972 0.000        1 bisc_SRR6911624 #>        5:   chr1    923973    923974 0.000        1 bisc_SRR6911624 #>       ---                                                           #> 45733375:   chr4 190179369 190179370 0.000        2 bisc_SRR6911723 #> 45733376:   chr4 190179686 190179687 1.000        1 bisc_SRR6911723 #> 45733377:   chr4 190179687 190179688 0.500        2 bisc_SRR6911723 #> 45733378:   chr4 190179753 190179754 1.000        1 bisc_SRR6911723 #> 45733379:   chr4 190179754 190179755 0.333        3 bisc_SRR6911723"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"get-summary-data","dir":"Articles","previous_headings":"Running iscream","what":"Get summary data","title":"Getting started with iscream","text":"get summary information gene bodies use summarize_regions, providing gene name column feature column: Alternatively use methylation-specific summarize_meth_regions() function:","code":"system.time(summary_query <- summarize_regions(   bedfiles,   regions,   columns = 4,   col_names = \"beta\",   feature_col = \"gene\") ) #> [15:59:49.032602] [iscream::summarize_regions] [info] Summarizing 5000 regions from 100 bedfiles #> [15:59:49.032651] [iscream::summarize_regions] [info] using sum, mean, median, stddev, variance, min, max, range, count #> [15:59:49.032653] [iscream::summarize_regions] [info] with columns 4 as beta #>    user  system elapsed  #>  27.525   0.536   5.107 head(summary_query) #>   feature            file beta.sum beta.mean beta.median beta.stddev #> 1  ATAD3B bisc_SRR6911624   85.000 0.8585859           1   0.3502215 #> 2  PRDM16 bisc_SRR6911624  723.500 0.5288743           1   0.4976973 #> 3   PEX10 bisc_SRR6911624   15.000 0.2419355           0   0.4317514 #> 4   PEX14 bisc_SRR6911624  198.000 0.7764706           1   0.4174294 #> 5   PLCH2 bisc_SRR6911624  184.333 0.7228745           1   0.4474832 #> 6   SPSB1 bisc_SRR6911624   64.000 0.8648649           1   0.3442015 #>   beta.variance beta.min beta.max beta.range count #> 1     0.1226551        0        1          1    99 #> 2     0.2477026        0        1          1  1368 #> 3     0.1864093        0        1          1    62 #> 4     0.1742473        0        1          1   255 #> 5     0.2002412        0        1          1   255 #> 6     0.1184746        0        1          1    74 system.time(summary_query <- summarize_meth_regions(   bedfiles,   regions,   feature_col = \"gene\") )"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"build-matrices","dir":"Articles","previous_headings":"Running iscream","what":"Build matrices","title":"Getting started with iscream","text":"make_mat() function queries stores every locus within input regions across input files. Unlike summarize_regions() output matrix dimensions unknown runtime. Although usually quite fast, locus count large overlaps loci files, can take long time. , gene bodies large final matrix can contain millions loci. , sparse data, chances new loci found every file. Preallocating number rows, however, can drastically reduce runtime. Since got 45 million loci/CpGs BED files tabix query , can expect approximately 5 10 million unique loci single-cell data lower coverage bulk. already tabix query can get unique CpG count use preallocate matrix, reducing number matrix resizes. ’ll add 100,000 extra top existing count safe since every avoided resize cuts least couple seconds runtime. Making tabix queries can relatively quick way approximate CpG count dataset. haven’t done tabix query full dataset, can approximate many CpGs expect based CpG counts one file coverage WGBS method. make matrix beta-values 4th column: output make_mat() named list containing matrix beta values vectors sample names, chromosome names positions loci. want make BSseq object, can use make_bsseq_mat() makes beta/M-value coverage value matrices. output can used produce BSseq object. However since BSseq work sparse matrices, two matrices need converted dense matrices first.","code":"cpg.count <- tbx_query$start |> unique() |> length() system.time(meth_mat <- make_mat(   bedfiles,   regions,   column = 4,   sparse = TRUE,   prealloc = cpg.count + 1e5 )) #> [15:59:56.450308] [iscream::query_all] [info] Querying 5000 regions from 100 bedfiles #>  #> [16:00:40.571982] [iscream::query_all] [info] Creating metadata vectors #> [16:00:40.867558] [iscream::query_all] [info] 7276107 loci found - 16250 extra rows allocated with 0 resizes #> [16:00:44.217883] [iscream::query_all] [info] Creating sparse matrix #>    user  system elapsed  #> 335.525   1.186  47.981 str(meth_mat) #> List of 4 #>  $ value      :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:32627134] 9 11 12 13 14 15 16 17 18 19 ... #>   .. ..@ p       : int [1:101] 0 157256 362760 626888 904511 1158005 1437240 1729046 2014168 2231683 ... #>   .. ..@ Dim     : int [1:2] 7276107 100 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"bisc_SRR6911624\" \"bisc_SRR6911625\" \"bisc_SRR6911626\" \"bisc_SRR6911627\" ... #>   .. ..@ x       : num [1:32627134] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ pos        : int [1:7276107] 1472309 1472386 1472390 1472394 1472407 1472414 1472439 1472489 1472503 1473922 ... #>  $ chr        : chr [1:7276107] \"chr1\" \"chr1\" \"chr1\" \"chr1\" ... #>  $ sampleNames: chr [1:100] \"bisc_SRR6911624\" \"bisc_SRR6911625\" \"bisc_SRR6911626\" \"bisc_SRR6911627\" ... meth_mat <- make_bsseq_mat(   bedfiles,   regions,   sparse = TRUE,   prealloc = cpg.count + 1e5 ) bs <- do.call(BSseq, meth_mat)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Getting started with iscream","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS/LAPACK: /nix/store/6kknwpcf8fl7ihkkxmdb6p764kdn443n-blas-3/lib/libblas.so.3;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: America/Detroit #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] data.table_1.17.0  iscream_0.1.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] compiler_4.4.3      parallelly_1.42.0   Matrix_1.7-2        #>  [4] parallel_4.4.3      tools_4.4.3         Rcpp_1.0.14         #>  [7] grid_4.4.3          knitr_1.47          xfun_0.51           #> [10] RcppParallel_5.1.10 stringfish_0.16.0   lattice_0.22-6      #> [13] evaluate_0.24.0"},{"path":"https://huishenlab.github.io/iscream/dev/articles/manuscript_data.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Manuscript data availabiliy","text":"Two datasets used produce figure paper: snmC-seq2 scWGBS data (Luo et al. 2018) single-cell benchmarks. bulk WGBS project lab datasets aligned BISCUIT (Zhou et al. 2024). produce Bismark BEDgraph files (Krueger Andrews 2011), used python script convert beta coverage value columns percentage methylation, unmethylated reads methylated read columns. Using GNU parallel: using iscream.paper package https://github.com/huishenlab/iscream.paper ran benchmarks produced figures.","code":"import sys import gzip  bedfile = sys.argv[1]  def bed2cov(line):     chr, start, end, beta, cov = line.split('\\t')     percent, meth, unmeth = convert(float(beta), int(cov))     return '\\t'.join([chr, start, start, str(percent), str(meth), str(unmeth)])  def convert(beta, cov):     percent = round(beta * 100)     meth = round(beta * cov)     unmeth = cov - meth     return [percent, meth, unmeth]  with gzip.open(bedfile, 'rt') as bed:     for line in bed:         print(bed2cov(line)) parallel python bed2cov.py <biscuit_path>/{} '>' <bismark_path>/{/.} ::: biscuit_path/*.bed.gz"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"one-file","dir":"Articles","previous_headings":"","what":"One file","title":"iscream vs Rsamtools::scanTabix","text":"tabix raw = TRUE scanTabix produce list unparsed raw strings. result identical. tabix vs scanTabix raw string output 1 file","code":"bench_1_raw <- microbenchmark(   `rsamtools 1 file raw` = rq <- scanTabix(methscan_files[1], param = mouse_promoters.gr),   `iscream 1 file raw` = iq <- tabix(methscan_files[1], mouse_promoters, raw = TRUE),   times = 3 ) bench_1_raw ## Unit: milliseconds ##                  expr        min         lq      mean     median         uq ##  rsamtools 1 file raw 1826.82051 1967.86772 2215.0109 2108.91493 2409.10609 ##    iscream 1 file raw   78.92343   79.86577   83.4658   80.80811   85.73699 ##         max neval ##  2709.29725     3 ##    90.66587     3 autoplot(bench_1_raw) iq[1:5] ## $`1:3669498-3673498` ## character(0) ##  ## $`1:4407241-4411241` ## character(0) ##  ## $`1:4494413-4498413` ## character(0) ##  ## $`1:4783739-4787739` ## [1] \"1\\t4785488\\t4785488\\t0.000000\\t0\\t2\"   ## [2] \"1\\t4785513\\t4785513\\t0.000000\\t0\\t2\"   ## [3] \"1\\t4785522\\t4785522\\t0.000000\\t0\\t2\"   ## [4] \"1\\t4785533\\t4785533\\t0.000000\\t0\\t2\"   ## [5] \"1\\t4786780\\t4786780\\t100.000000\\t1\\t0\" ## [6] \"1\\t4786886\\t4786886\\t100.000000\\t1\\t0\" ## [7] \"1\\t4786958\\t4786958\\t100.000000\\t1\\t0\" ##  ## $`1:4805823-4809823` ## [1] \"1\\t4806176\\t4806176\\t100.000000\\t1\\t0\" ## [2] \"1\\t4806221\\t4806221\\t100.000000\\t1\\t0\" ## [3] \"1\\t4807572\\t4807572\\t0.000000\\t0\\t1\"   ## [4] \"1\\t4807669\\t4807669\\t0.000000\\t0\\t2\"   ## [5] \"1\\t4807682\\t4807682\\t0.000000\\t0\\t2\"   ## [6] \"1\\t4807872\\t4807872\\t0.000000\\t0\\t1\"   ## [7] \"1\\t4807890\\t4807890\\t0.000000\\t0\\t1\"   ## [8] \"1\\t4807940\\t4807940\\t0.000000\\t0\\t1\"   ## [9] \"1\\t4807950\\t4807950\\t0.000000\\t0\\t1\" all.equal(iq, rq) ## [1] TRUE"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"multiple-files","dir":"Articles","previous_headings":"","what":"Multiple files","title":"iscream vs Rsamtools::scanTabix","text":"tabix can also take multiple files call. returns raw strings, input file list ’s . scanTabix support .","code":"bench_30_raw <- microbenchmark(   `iscream 30 files raw` = iq <- tabix(methscan_files, mouse_promoters, raw = TRUE),   times = 3 ) bench_30_raw ## Unit: seconds ##                  expr      min       lq     mean   median       uq      max ##  iscream 30 files raw 1.993962 2.015125 2.129326 2.036288 2.197008 2.357727 ##  neval ##      3 names(iq) ##  [1] \"cell_01\" \"cell_02\" \"cell_03\" \"cell_04\" \"cell_05\" \"cell_06\" \"cell_07\" ##  [8] \"cell_08\" \"cell_09\" \"cell_10\" \"cell_11\" \"cell_12\" \"cell_13\" \"cell_14\" ## [15] \"cell_15\" \"cell_16\" \"cell_17\" \"cell_18\" \"cell_19\" \"cell_20\" \"cell_21\" ## [22] \"cell_22\" \"cell_23\" \"cell_24\" \"cell_25\" \"cell_26\" \"cell_27\" \"cell_28\" ## [29] \"cell_29\" \"cell_30\" iq[[\"cell_01\"]][1:5] ## $`1:3669498-3673498` ## character(0) ##  ## $`1:4407241-4411241` ## character(0) ##  ## $`1:4494413-4498413` ## character(0) ##  ## $`1:4783739-4787739` ## [1] \"1\\t4785488\\t4785488\\t0.000000\\t0\\t2\"   ## [2] \"1\\t4785513\\t4785513\\t0.000000\\t0\\t2\"   ## [3] \"1\\t4785522\\t4785522\\t0.000000\\t0\\t2\"   ## [4] \"1\\t4785533\\t4785533\\t0.000000\\t0\\t2\"   ## [5] \"1\\t4786780\\t4786780\\t100.000000\\t1\\t0\" ## [6] \"1\\t4786886\\t4786886\\t100.000000\\t1\\t0\" ## [7] \"1\\t4786958\\t4786958\\t100.000000\\t1\\t0\" ##  ## $`1:4805823-4809823` ## [1] \"1\\t4806176\\t4806176\\t100.000000\\t1\\t0\" ## [2] \"1\\t4806221\\t4806221\\t100.000000\\t1\\t0\" ## [3] \"1\\t4807572\\t4807572\\t0.000000\\t0\\t1\"   ## [4] \"1\\t4807669\\t4807669\\t0.000000\\t0\\t2\"   ## [5] \"1\\t4807682\\t4807682\\t0.000000\\t0\\t2\"   ## [6] \"1\\t4807872\\t4807872\\t0.000000\\t0\\t1\"   ## [7] \"1\\t4807890\\t4807890\\t0.000000\\t0\\t1\"   ## [8] \"1\\t4807940\\t4807940\\t0.000000\\t0\\t1\"   ## [9] \"1\\t4807950\\t4807950\\t0.000000\\t0\\t1\" scanTabix(methscan_files, param = GRanges(mouse_promoters)) ## Error in h(simpleError(msg, call)): error in evaluating the argument 'file' in selecting a method for function 'scanTabix': 'file' must be length 1"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"parsing-records-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Parsing records into a data frame","title":"iscream vs Rsamtools::scanTabix","text":"parsed data frame useful list raw strings - drop raw argument tabix. scanTabix, function parses list strings make similar data frame: column types different data identical. tabix vs scanTabix parsed data frame 1 file","code":"rtbx <- function(bed) {   q <- scanTabix(bed, param = GRanges(mouse_promoters)) |>     lapply(strsplit, split = \"\\t\") |>     Filter(function(i) length(i) != 0, x = _) |>     unlist(recursive = FALSE) |>     do.call(rbind, args = _) |>     as.data.table() |>     setnames(c(\"chr\", \"start\", \"end\", paste0(\"V\", 1:3)))   q }  bench_1_df <- microbenchmark(   `rsamtools 1 file data frame` = rq <- rtbx(methscan_files[1]),   `iscream 1 file data frame` = iq <- tabix(methscan_files[1], mouse_promoters),   times = 3 ) rq ##           chr     start       end         V1     V2     V3 ##        <char>    <char>    <char>     <char> <char> <char> ##     1:      1   4785488   4785488   0.000000      0      2 ##     2:      1   4785513   4785513   0.000000      0      2 ##     3:      1   4785522   4785522   0.000000      0      2 ##     4:      1   4785533   4785533   0.000000      0      2 ##     5:      1   4786780   4786780 100.000000      1      0 ##    ---                                                     ## 79900:      X 168673566 168673566   0.000000      0      1 ## 79901:      X 168673577 168673577   0.000000      0      1 ## 79902:      X 168674670 168674670   0.000000      0      1 ## 79903:      X 168675047 168675047   0.000000      0      1 ## 79904:      X 169318831 169318831 100.000000      1      0 iq ##           chr     start       end    V1    V2    V3 ##        <char>     <int>     <int> <num> <int> <int> ##     1:      1   4785488   4785488     0     0     2 ##     2:      1   4785513   4785513     0     0     2 ##     3:      1   4785522   4785522     0     0     2 ##     4:      1   4785533   4785533     0     0     2 ##     5:      1   4786780   4786780   100     1     0 ##    ---                                              ## 79900:      X 168673566 168673566     0     0     1 ## 79901:      X 168673577 168673577     0     0     1 ## 79902:      X 168674670 168674670     0     0     1 ## 79903:      X 168675047 168675047     0     0     1 ## 79904:      X 169318831 169318831   100     1     0 all.equal(iq, rq, check.attributes = F) ## [1] \"Datasets have different column modes. First 3: start(numeric!=character) end(numeric!=character) V1(numeric!=character)\" bench_1_df ## Unit: milliseconds ##                         expr       min        lq      mean    median        uq ##  rsamtools 1 file data frame 2984.2747 3060.8480 3159.9506 3137.4213 3247.7886 ##    iscream 1 file data frame  143.3846  147.2966  161.2119  151.2086  170.1255 ##        max neval ##  3358.1559     3 ##   189.0425     3 autoplot(bench_1_df)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"multiple-files-as-data-frame","dir":"Articles","previous_headings":"","what":"Multiple files as data frame","title":"iscream vs Rsamtools::scanTabix","text":"can try query multiple BED files using Rsamtools function 8 cores like iscream : tabix vs scanTabix parsed data frame 30 files","code":"partbx <- function(bedfiles) {   mclapply(     methscan_files,     function(bed) {       query <- rtbx(bed)[, file := tools::file_path_sans_ext(basename(bed), compression = TRUE)][]       setnames(query, c(\"chr\", \"start\", \"end\", \"beta\", \"M\", \"U\", \"file\"))       query     },     mc.cores = 8   ) |>     rbindlist() }  bench_30_df <- microbenchmark(   `rsamtools 30 file data frame` = rq <- partbx(methscan_files[1]),   `iscream 30 file data frame` = iq <- tabix(methscan_files[1], mouse_promoters, col.names = c(\"beta\", \"M\", \"U\")),   times = 3 ) bench_30_df ## Unit: milliseconds ##                          expr        min         lq       mean     median ##  rsamtools 30 file data frame 25345.3997 26556.0112 28790.6806 27766.6228 ##    iscream 30 file data frame   137.4796   139.6301   144.6862   141.7806 ##          uq        max neval ##  30513.3211 33260.0193     3 ##    148.2894   154.7983     3 autoplot(bench_30_df)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"all-benchmarks","dir":"Articles","previous_headings":"Multiple files as data frame","what":"All benchmarks","title":"iscream vs Rsamtools::scanTabix","text":"","code":"bench_all <- rbind(bench_1_raw, bench_30_raw, bench_1_df, bench_30_raw, bench_30_df)  bench.dt <- as.data.table(bench_all)[, .(   time       = time / 1000000,   package    = fifelse(grepl(\"iscream\", expr), \"iscream\", \"rsamtools\"),   files      = fifelse(grepl(\"1\", expr), 1, 30),   data.frame = fifelse(grepl(\"raw\", expr), FALSE, TRUE) )][,   package := paste(package, fifelse(data.frame, \"df\", \"raw\")) ]  plt <- ggplot(bench.dt, aes(x = package, y = time, color = as.factor(files))) +     geom_boxplot() +     labs(x = \"Package and return type\") +     scale_color_discrete(name = \"File count\") +     theme_minimal()"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"runtime","dir":"Articles","previous_headings":"Multiple files as data frame > All benchmarks","what":"Runtime","title":"iscream vs Rsamtools::scanTabix","text":"Comparing benchmarked iscream Rsamtools querying runtimes","code":"plt + labs(y = \"Runtime (milliseconds)\")"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"runtime-log-scale","dir":"Articles","previous_headings":"Multiple files as data frame > All benchmarks","what":"Runtime log scale","title":"iscream vs Rsamtools::scanTabix","text":"log10 scaled runtime benchmarks run","code":"plt + scale_y_log10() + labs(y = \"log10 Runtime (milliseconds)\")"},{"path":"https://huishenlab.github.io/iscream/dev/articles/tabix.html","id":"session-info","dir":"Articles","previous_headings":"Multiple files as data frame","what":"Session info","title":"iscream vs Rsamtools::scanTabix","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS/LAPACK: /nix/store/6kknwpcf8fl7ihkkxmdb6p764kdn443n-blas-3/lib/libblas.so.3;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: America/Detroit ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] parallel  stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] ggplot2_3.5.1         microbenchmark_1.4.10 Rsamtools_2.22.0      ##  [4] Biostrings_2.74.1     XVector_0.46.0        GenomicRanges_1.58.0  ##  [7] GenomeInfoDb_1.42.3   IRanges_2.40.1        S4Vectors_0.44.0      ## [10] BiocGenerics_0.52.0   data.table_1.17.0     iscream_0.1.0.9000    ##  ## loaded via a namespace (and not attached): ##  [1] Matrix_1.7-2            gtable_0.3.5            jsonlite_1.8.8          ##  [4] highr_0.11              compiler_4.4.3          crayon_1.5.3            ##  [7] Rcpp_1.0.14             bitops_1.0-9            scales_1.3.0            ## [10] BiocParallel_1.40.0     lattice_0.22-6          R6_2.5.1                ## [13] labeling_0.4.3          knitr_1.47              tibble_3.2.1            ## [16] munsell_0.5.1           stringfish_0.16.0       GenomeInfoDbData_1.2.13 ## [19] pillar_1.10.1           rlang_1.1.4             xfun_0.51               ## [22] RcppParallel_5.1.10     cli_3.6.3               withr_3.0.0             ## [25] magrittr_2.0.3          zlibbioc_1.52.0         grid_4.4.3              ## [28] lifecycle_1.0.4         vctrs_0.6.5             evaluate_0.24.0         ## [31] glue_1.7.0              farver_2.1.2            codetools_0.2-20        ## [34] colorspace_2.1-1        parallelly_1.42.0       httr_1.4.7              ## [37] pkgconfig_2.0.3         tools_4.4.3             UCSC.utils_1.2.0"},{"path":"https://huishenlab.github.io/iscream/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Eapen. Author, maintainer. Jacob Morrison. Author. Nathan Spix. Contributor. Hui Shen. Thesis advisor, funder.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eapen J, Morrison J (2025). iscream: Integrating Single-Cell Results Exploring Analyzing Methylation. R package version 0.1.0.9000, https://huishenlab.github.io/iscream/.","code":"@Manual{,   title = {iscream: Integrating Single-Cell Results for Exploring and Analyzing Methylation},   author = {James Eapen and Jacob Morrison},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://huishenlab.github.io/iscream/}, }"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"iscream-","dir":"","previous_headings":"","what":"iscream","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"iscream aims efficiently read data BED file formats usable packages. Using htslib, iscream can query genomic regions like tabix, summarize queried data make matrices, specific support WGBS BED files aligned BISCUIT, Bismark BSBolt. Analysis visualization Whole Genome Bisulfite Sequencing (WGBS)1 data requires reading aligned sequencing data formats existing packages like BSseq scMET can analyze. Getting data -disk BED files matrix methylation values can difficult , nearly 30 million CpGs, WGBS data can quite large. iscream makes importing WGBS data targeted exploration analysis faster memory efficient.","code":""},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"htslib--117","dir":"","previous_headings":"Dependencies","what":"htslib >= 1.17","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"iscream depends htslib header files. may installed package manager: ubuntu/debian: libhts-dev fedora/RHEL: htslib-devel brew: htslib nixpkgs: htslib conda: bioconda::htslib built manually: https://www.htslib.org/download/. recommend installing htslib libdeflate support optimal performance - see vignette(\"htslib\") information. header files may also found among HPC modules - make sure PKG_CONFIG_PATH environment variable includes pkgconfig location installation htslib. can verify htslib development libraries installed pkg-config:","code":"# set path if necessary export PKG_CONFIG_PATH=[path to htslib installation] # verify that htslib can be found pkg-config --cflags --libs htslib"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"tabix","dir":"","previous_headings":"Dependencies > htslib >= 1.17","what":"tabix","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"htslib installations include tabix executable (Ubuntu need install libhts-dev tabix). iscream work without tabix, tabix() function faster executable installed.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"gcc--940","dir":"","previous_headings":"Dependencies","what":"GCC >= 9.4.0","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"GNU GCC must installed OpenMP support. usually installed default Linux systems, may need manually installed MacOS use iscream multiple threads2.","code":""},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"can install development version Github cloning repo running can also use R devtools package: pak:","code":"git clone https://github.com/huishenlab/iscream R CMD INSTALL iscream devtools::install_github(\"huishenlab/iscream\") pak::pkg_install(\"huishenlab/iscream\")"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"usage","dir":"","previous_headings":"Installation","what":"Usage","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"See quick start guide overview iscream’s functionality function reference available functions. Bug reports may submitted GitHub issues.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Query all CpG info into M and coverage matrices — Cpp_query_all","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"Query CpG info M coverage matrices","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"","code":"Cpp_query_all(   bedfiles,   regions,   aligner,   valInd,   merged,   sparse,   prealloc,   nthreads )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"bedfiles vector bedfiles regions vector regions aligner aligner used make WGBS BED files, make_bsseq_mat valInd index data column needed matrix, make_mat merged Whether input strands merged/collapsed prealloc number rows initialize matrices nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"list one two matrices, chromosome, position, filename vectors","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"spdlog Logging Lever Setter — Cpp_set_log_level","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"helper function turn logging level given string current logging level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"","code":"Cpp_set_log_level(name)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"name string logging level. Value understood , decreasing verbosity ‘trace’, ‘debug’, ‘info’, ‘warning’, ‘error’, ‘critical’, ‘’. Unrecognised names equivalent ‘’.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"Nothing returned.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","title":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","text":"function called summarize_regions() since sanity checks C++ side.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","text":"","code":"Cpp_summarize_regions(   bedfiles,   regions,   fun_vec,   col_indices,   col_names,   aligner,   mval = FALSE,   region_rownames = FALSE,   nthreads = 1L )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","text":"bedfiles vector bedfile paths regions vector genomic regions fun_vec Vector armadillo-supported stats functions apply CpGs ' regions: \"sum\", \"mean\", \"median\", \"stddev\", \"variance\" \"count\", \"min\",\"max\", \"range\". col_indices vector genomic regions col_names vector genomic regions mval Calculates M values TRUE, use beta values FALSE region_rownames Whether set rownames regions strings. necessary regions vector unnamed. names, \"feature\" column set names rownames set regions string nthreads Number cores use. See details.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","text":"summary data.frame","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function over BED file records within genomic features — Cpp_summarize_regions","text":"optimal number threads depends number bedfiles, set half available OpenMP cores. See ?get_threads details. can manaully set set_threads().","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that files exist — check_files_exist","title":"Check that files exist — check_files_exist","text":"Check files exist","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that files exist — check_files_exist","text":"","code":"check_files_exist(files_vec, error_file_prefix = \"Bedfile\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that files exist — check_files_exist","text":"files_vec vector file paths error_file_prefix Error message prefix 'Bedfile' vs 'Tabix file'","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that files exist — check_files_exist","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the required threads are available — check_thread_count","title":"Check that the required threads are available — check_thread_count","text":"Check required threads available","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the required threads are available — check_thread_count","text":"","code":"check_thread_count(   n_threads,   avail_threads = availableCores(),   opt_set = FALSE )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the required threads are available — check_thread_count","text":"n_threads number threads check availability avail_threads number threads available system. Defaults parallelly::availableCores() opt_set Whether iscream.threads options set","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the required threads are available — check_thread_count","text":"n_threads requested number threads available stops ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":null,"dir":"Reference","previous_headings":"","what":"DataFrame to region strings — get_df_string","title":"DataFrame to region strings — get_df_string","text":"Convert DataFrame vector strings. Set feature names \"name\" column","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataFrame to region strings — get_df_string","text":"","code":"get_df_string(regions_df, feature_col = NULL)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataFrame to region strings — get_df_string","text":"regions_df data frame \"chr\", \"start\" \"end\" columns feature_col data frame column use names output string vector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DataFrame to region strings — get_df_string","text":"character vector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataFrame to region strings — get_df_string","text":"","code":"(df <- data.frame(chr = c(\"chr1\", \"chr2\"), start = c(1, 5), end = c(4, 10))) #>    chr start end #> 1 chr1     1   4 #> 2 chr2     5  10 get_df_string(df) #> [1] \"chr1:1-4\"  \"chr2:5-10\""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":null,"dir":"Reference","previous_headings":"","what":"GRanges to region strings — get_granges_string","title":"GRanges to region strings — get_granges_string","text":"Convert GRanges object vector strings","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRanges to region strings — get_granges_string","text":"","code":"get_granges_string(gr, sep = c(\":\", \"-\"))"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GRanges to region strings — get_granges_string","text":"gr GRanges object sep Vector separators use genomic string. First element used separate chromosome coordinates, second separator used separate start end coordinates.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GRanges to region strings — get_granges_string","text":"character vector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GRanges to region strings — get_granges_string","text":"function adapted stuart-lab/signac.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GRanges to region strings — get_granges_string","text":"","code":"if (requireNamespace(\"GenomicRanges\", quietly = TRUE)) {   get_granges_string(GenomicRanges::GRanges(c(\"chr1:1-10\", \"chr2:15-20\"))) } #> [1] \"chr1:1-10\"  \"chr2:15-20\""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current log level — get_log_level","title":"Get the current log level — get_log_level","text":"Can handle spdlogs levels, iscream functions supports \"info\" \"debug\"","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current log level — get_log_level","text":"","code":"get_log_level()"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current log level — get_log_level","text":"current logging level string","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the current log level — get_log_level","text":"","code":"get_log_level() #> [1] \"info\""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of available threads — get_threads","title":"Get the number of available threads — get_threads","text":"Gets number threads iscream currently set use, whether \"iscream.threads\" option set many threads available use. set number threads use set_threads() set iscream.threads option ~/.Rprofile. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of available threads — get_threads","text":"","code":"get_threads()"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of available threads — get_threads","text":"named vector: use_threads = number threads iscream use opt_set = whether option set user avail_threads = number available threads reported parallelly::availableCores","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of available threads — get_threads","text":"","code":"get_threads() #>   use_threads       opt_set avail_threads  #>             1             1             4"},{"path":"https://huishenlab.github.io/iscream/dev/reference/htslib_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get htslib version and available features — htslib_version","title":"Get htslib version and available features — htslib_version","text":"Returns version htslib used iscream whether features libdeflate support available. information may always correspond htslib version used iscream's installation different htslib version available linking runtime.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/htslib_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get htslib version and available features — htslib_version","text":"","code":"htslib_version()"},{"path":"https://huishenlab.github.io/iscream/dev/reference/htslib_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get htslib version and available features — htslib_version","text":"None","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/htslib_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get htslib version and available features — htslib_version","text":"","code":"htslib_version() #> 1.19 #> build=configure libcurl=yes S3=yes GCS=yes libdeflate=yes lzma=yes bzip2=yes plugins=yes plugin-path=/usr/local/lib/htslib:/usr/local/libexec/htslib:/usr/lib/x86_64-linux-gnu/htslib: htscodecs=1.6.0"},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"Queries provided regions produces M/beta Coverage matrices genomic positions. Parallelized across files using threads \"iscream.threads\" option. output make_bsseq_mat may used create BSseq object: .call(BSseq, make_bsseq_mat(...)).","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"","code":"make_bsseq_mat(   bedfiles,   regions,   aligner = \"biscuit\",   mval = TRUE,   merged = TRUE,   sparse = FALSE,   prealloc = 10000,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". mval Whether return M-values beta-values coverage matrix. Defaults M-value. Set mval=FALSE get beta value matrix. merged Whether input strands merged/collapsed sparse Whether return M coverage matrices sparse matrices (\"dgCMatrix\"). Set TRUE scWGBS data prealloc number rows initialize matrices . number methyltion loci approximately known, can reduce runtime fewer resizes need made. nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"named list coverage either beta- M-value matrix character vector chromosomes numeric vector corresponding CpG base positions character vector input sample names","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"bitpacking-limits","dir":"Reference","previous_headings":"","what":"Bitpacking limits","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"coverage values exceed 32,767, upper limit 16-bit signed integer, capped limit. Beta values also capped similarly, values bug aligner produced data.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_bsseq_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make M/beta and coverage matrices from WGBS BED files — make_bsseq_mat","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") make_bsseq_mat(bedfiles, regions) #> [19:13:19.832294] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles #>  #> [19:13:19.832704] [iscream::query_all] [info] Creating metadata vectors #> [19:13:19.832756] [iscream::query_all] [info] 7 loci found - 9993 extra rows allocated with 0 resizes #> [19:13:19.832761] [iscream::query_all] [info] Creating dense matrix #> $M #>      a b c d #> [1,] 1 0 0 1 #> [2,] 1 0 2 2 #> [3,] 0 2 0 0 #> [4,] 0 1 0 0 #> [5,] 1 0 1 1 #> [6,] 2 0 0 0 #> [7,] 3 1 0 1 #>  #> $Cov #>      a b c d #> [1,] 1 2 0 1 #> [2,] 1 0 2 2 #> [3,] 2 2 0 0 #> [4,] 1 1 2 1 #> [5,] 2 0 1 2 #> [6,] 2 2 0 0 #> [7,] 3 1 0 1 #>  #> $pos #> [1]  0  2  4  6  8 10 12 #>  #> $chr #> [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" #>  #> $sampleNames #> [1] \"a\" \"b\" \"c\" \"d\" #>  # for BSseq object run if (FALSE) { # \\dontrun{ library(bsseq) do.call(BSseq, make_bsseq_mat(bedfiles, regions)) } # }"},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a matrix from a numeric column of BED files — make_mat","title":"Make a matrix from a numeric column of BED files — make_mat","text":"Queries provided regions produces matrix along genomic positions can returned RangedSummarizedExperiment (SummarizedExperiment installed). Parallelized across files using threads \"iscream.threads\" option.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a matrix from a numeric column of BED files — make_mat","text":"","code":"make_mat(   bedfiles,   regions,   column,   mat_name = \"value\",   sparse = FALSE,   prealloc = 10000,   make_se = TRUE,   make_gr = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a matrix from a numeric column of BED files — make_mat","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. column index data column needed matrix mat_name name matrix returned object sparse Whether return sparse matrix prealloc number rows initialize matrices . number loci approximately known, can reduce runtime fewer resizes need made. make_se Whether return SummarizedExperiment (default) make_gr Whether return GenomicRanges nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a matrix from a numeric column of BED files — make_mat","text":"SummarizedExperiment available, RangedSummarizedExperiment make_gr = TRUE GenomicRanges available, GRanges object, Otherwise, named list matrix value interest character vector chromosomes numeric vector base positions character vector input sample BED file names","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a matrix from a numeric column of BED files — make_mat","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/make_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a matrix from a numeric column of BED files — make_mat","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") # make matrix of beta values make_mat(bedfiles, regions, column = 4) #> [19:13:21.944886] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles #>  #> [19:13:21.945195] [iscream::query_all] [info] Creating metadata vectors #> [19:13:21.945222] [iscream::query_all] [info] 7 loci found - 9993 extra rows allocated with 0 resizes #> [19:13:21.945228] [iscream::query_all] [info] Creating dense matrix #> class: RangedSummarizedExperiment  #> dim: 7 4  #> metadata(0): #> assays(1): value #> rownames: NULL #> rowData names(0): #> colnames(4): a b c d #> colData names(0):"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","title":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","text":"Query chromosomes seqnames vector BED files","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","text":"","code":"query_chroms(bedfiles, nthreads = NULL)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","text":"bedfiles vector bedfile paths nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","text":"vector seqnames","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the chromosomes or seqnames from a vector of BED files — query_chroms","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) query_chroms(bedfiles) #> [1] \"chr1\""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Set logging level — set_log_level","title":"Set logging level — set_log_level","text":"Set logging level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set logging level — set_log_level","text":"","code":"set_log_level(level = \"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set logging level — set_log_level","text":"level logging verbosity level use \"info\": default gives provides basic information number files regions used function \"debug\": verbose row allocations, many CpGs found region, filename parsing etc. mode used one thread R output messages multiple threads without crashing. \"\": logging","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set logging level — set_log_level","text":"None; sets log level provided level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set logging level — set_log_level","text":"","code":"set_log_level(\"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the number of available threads — set_threads","title":"Set the number of available threads — set_threads","text":"Sets \"iscream.threads\" option n_threads. see many threads available see ?get_threads().","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the number of available threads — set_threads","text":"","code":"set_threads(n_threads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the number of available threads — set_threads","text":"n_threads number threads use","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the number of available threads — set_threads","text":"NULL. Sets iscream.threads option requested number threads available","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the number of available threads — set_threads","text":"iscream uses OpenMP parallelize certain functions. can use many threads available system varying degrees performance improvements. get_threads() function uses parallelly::availableCores() report number available threads. Although OpenMP can detect number available cores, high preformance computers (HPCs) resource allocating job schedulers like SLURM, OpenMP may detect available threads across HPC limit cores allocated scheduler. system administrator set limits, may result job taking resources jobs. limits, trying use threads available reduce iscream's performance. Job schedulers typically environment variable (e.g. SLURM_CPUS_ON_NODE SLURM) gives actual number available cores. , hyperthreaded systems, count may double available processors. Using hyperthreading guarantee performance improvement - may better set number threads half reported number. parallelly::availableCores() takes HPC scheduler/CRAN/Bioconductor limits account reporting number available threads may reliably report hyperthreading ('system' 'nproc'). set number threads without call set_threads() every session, put   .Rprofile See help('Rprofile') information startup options. Functions currently using multithreading: tabix() query_chroms() make_mat() make_mat(), make_bsseq_mat() summarize_regions(), summarize_meth_regions()","code":"options(iscream.threads = [n_threads])"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the number of available threads — set_threads","text":"","code":"(ncores <- parallelly::availableCores()) #> system  #>      4  if (FALSE) { # \\dontrun{ set_threads(ncores) } # }"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"Run summarizing functions CpGs bedfiles across genomic regions. Parallelized across files using threads \"iscream.threads\" option.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"","code":"summarize_meth_regions(   bedfiles,   regions,   fun = \"all\",   aligner = \"biscuit\",   feature_col = NULL,   mval = TRUE,   set_region_rownames = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. fun Function(s) apply region. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". feature_col input dataframe, column use feature label instead genomic region string mval Whether calculate M value (coverage \\(\\times \\beta\\)) use beta value applying function. set_region_rownames Use region strings returned data frame's rownames. Can useful named regions want regions strings rownames feature names. nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"data.frame","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns. string vector GenomicRanges inputs named, names used describe feature output dataframe. input dataframes feature column, set feature_col column name populate output's feature column. Supported fun arguments given . functions, setting mval = FALSE use beta values instead M value: Sum: \"sum\" Mean: \"mean\" Median: \"median\" Standard deviation: \"stddev\" Variance: \"variance\" Minimum: \"min\" Maximum: \"max\" Range: \"range\" . CpGs region: \"cpg_count\" summarizing computations backed Armadillo library. See https://arma.sourceforge.net/docs.html#stats_fns futher details supported functions","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_meth_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize CpGs methylation information over genomic regions — summarize_meth_regions","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") summarize_meth_regions(bedfiles, regions) #> [19:13:25.127606] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.127621] [iscream::summarize_regions] [info] using sum, mean, median, stddev, variance, min, max, range, count #> [19:13:25.127624] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, M #>       feature file coverage.sum M.sum coverage.mean    M.mean coverage.median #> 1    chr1:1-6    a            4     2      1.333333 0.6666667             1.0 #> 2   chr1:7-10    a            3     1      1.500000 0.5000000             1.5 #> 3  chr1:11-14    a            5     5      2.500000 2.5000000             2.5 #> 4    chr1:1-6    b            4     2      2.000000 1.0000000             2.0 #> 5   chr1:7-10    b            1     1      1.000000 1.0000000             1.0 #> 6  chr1:11-14    b            3     1      1.500000 0.5000000             1.5 #> 7    chr1:1-6    c            2     2      2.000000 2.0000000             2.0 #> 8   chr1:7-10    c            3     1      1.500000 0.5000000             1.5 #> 9  chr1:11-14    c           NA    NA            NA        NA              NA #> 10   chr1:1-6    d            3     3      1.500000 1.5000000             1.5 #> 11  chr1:7-10    d            3     1      1.500000 0.5000000             1.5 #> 12 chr1:11-14    d            1     1      1.000000 1.0000000             1.0 #>    M.median coverage.stddev  M.stddev coverage.variance M.variance coverage.min #> 1       1.0       0.5773503 0.5773503         0.3333333  0.3333333            1 #> 2       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 3       2.5       0.7071068 0.7071068         0.5000000  0.5000000            2 #> 4       1.0       0.0000000 1.4142136         0.0000000  2.0000000            2 #> 5       1.0       0.0000000 0.0000000         0.0000000  0.0000000            1 #> 6       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 7       2.0       0.0000000 0.0000000         0.0000000  0.0000000            2 #> 8       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 9        NA              NA        NA                NA         NA           NA #> 10      1.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 11      0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 12      1.0       0.0000000 0.0000000         0.0000000  0.0000000            1 #>    M.min coverage.max M.max coverage.range M.range cpg_count #> 1      0            2     1              1       1         3 #> 2      0            2     1              1       1         2 #> 3      2            3     3              1       1         2 #> 4      0            2     2              0       2         2 #> 5      1            1     1              0       0         1 #> 6      0            2     1              1       1         2 #> 7      2            2     2              0       0         1 #> 8      0            2     1              1       1         2 #> 9     NA           NA    NA             NA      NA        NA #> 10     1            2     2              1       1         2 #> 11     0            2     1              1       1         2 #> 12     1            1     1              0       0         1 names(regions) <- c(\"A\", \"B\", \"C\") summarize_meth_regions(bedfiles, regions, fun = c(\"mean\", \"stddev\"), mval = FALSE) #> [19:13:25.145732] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.145744] [iscream::summarize_regions] [info] using mean, stddev #> [19:13:25.145747] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, beta #>    feature file coverage.mean beta.mean coverage.stddev beta.stddev #> 1        A    a      1.333333 0.6666667       0.5773503   0.5773503 #> 2        B    a      1.500000 0.2500000       0.7071068   0.3535534 #> 3        C    a      2.500000 1.0000000       0.7071068   0.0000000 #> 4        A    b      2.000000 0.5000000       0.0000000   0.7071068 #> 5        B    b      1.000000 1.0000000       0.0000000   0.0000000 #> 6        C    b      1.500000 0.5000000       0.7071068   0.7071068 #> 7        A    c      2.000000 1.0000000       0.0000000   0.0000000 #> 8        B    c      1.500000 0.5000000       0.7071068   0.7071068 #> 9        C    c            NA        NA              NA          NA #> 10       A    d      1.500000 1.0000000       0.7071068   0.0000000 #> 11       B    d      1.500000 0.2500000       0.7071068   0.3535534 #> 12       C    d      1.000000 1.0000000       0.0000000   0.0000000 summarize_meth_regions(bedfiles, regions, fun = \"sum\") #> [19:13:25.149817] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.149825] [iscream::summarize_regions] [info] using sum #> [19:13:25.149828] [iscream::summarize_regions] [info] with columns 4, 5 as coverage, M #>    feature file coverage.sum M.sum #> 1        A    a            4     2 #> 2        B    a            3     1 #> 3        C    a            5     5 #> 4        A    b            4     2 #> 5        B    b            1     1 #> 6        C    b            3     1 #> 7        A    c            2     2 #> 8        B    c            3     1 #> 9        C    c           NA    NA #> 10       A    d            3     3 #> 11       B    d            3     1 #> 12       C    d            1     1"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize information over genomic regions from any BED file — summarize_regions","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"Run summarizing functions bedfile records across genomic regions. Parallelized across files using threads \"iscream.threads\" option.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"","code":"summarize_regions(   bedfiles,   regions,   columns,   col_names,   fun = \"all\",   feature_col = NULL,   set_region_rownames = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. columns vector indices numeric columns summarized col_names vector names use columns output fun Function(s) apply region. See details. feature_col input dataframe, column use feature label instead genomic region string set_region_rownames Use region strings returned data frame's rownames. Can useful named regions want regions strings rownames feature names. nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"data.frame","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns. string vector GenomicRanges inputs named, names used describe feature output dataframe. input dataframes feature column, set feature_col column name populate output's feature column. Supported fun arguments given . Sum: \"sum\" Mean: \"mean\" Median: \"median\" Standard deviation: \"stddev\" Variance: \"variance\" Minimum: \"min\" Maximum: \"max\" Range: \"range\" . records region: \"count\" summarizing computations backed Armadillo library. See https://arma.sourceforge.net/docs.html#stats_fns futher details supported functions","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize information over genomic regions from any BED file — summarize_regions","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") summarize_regions(bedfiles, regions, columns = c(4, 5), col_names = c(\"beta\", \"cov\")) #> [19:13:25.396816] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.396831] [iscream::summarize_regions] [info] using sum, mean, median, stddev, variance, min, max, range, count #> [19:13:25.396834] [iscream::summarize_regions] [info] with columns 4, 5 as beta, cov #>       feature file beta.sum cov.sum beta.mean cov.mean beta.median cov.median #> 1    chr1:1-6    a      2.0       4 0.6666667 1.333333        1.00        1.0 #> 2   chr1:7-10    a      0.5       3 0.2500000 1.500000        0.25        1.5 #> 3  chr1:11-14    a      2.0       5 1.0000000 2.500000        1.00        2.5 #> 4    chr1:1-6    b      1.0       4 0.5000000 2.000000        0.50        2.0 #> 5   chr1:7-10    b      1.0       1 1.0000000 1.000000        1.00        1.0 #> 6  chr1:11-14    b      1.0       3 0.5000000 1.500000        0.50        1.5 #> 7    chr1:1-6    c      1.0       2 1.0000000 2.000000        1.00        2.0 #> 8   chr1:7-10    c      1.0       3 0.5000000 1.500000        0.50        1.5 #> 9  chr1:11-14    c       NA      NA        NA       NA          NA         NA #> 10   chr1:1-6    d      2.0       3 1.0000000 1.500000        1.00        1.5 #> 11  chr1:7-10    d      0.5       3 0.2500000 1.500000        0.25        1.5 #> 12 chr1:11-14    d      1.0       1 1.0000000 1.000000        1.00        1.0 #>    beta.stddev cov.stddev beta.variance cov.variance beta.min cov.min beta.max #> 1    0.5773503  0.5773503     0.3333333    0.3333333        0       1      1.0 #> 2    0.3535534  0.7071068     0.1250000    0.5000000        0       1      0.5 #> 3    0.0000000  0.7071068     0.0000000    0.5000000        1       2      1.0 #> 4    0.7071068  0.0000000     0.5000000    0.0000000        0       2      1.0 #> 5    0.0000000  0.0000000     0.0000000    0.0000000        1       1      1.0 #> 6    0.7071068  0.7071068     0.5000000    0.5000000        0       1      1.0 #> 7    0.0000000  0.0000000     0.0000000    0.0000000        1       2      1.0 #> 8    0.7071068  0.7071068     0.5000000    0.5000000        0       1      1.0 #> 9           NA         NA            NA           NA       NA      NA       NA #> 10   0.0000000  0.7071068     0.0000000    0.5000000        1       1      1.0 #> 11   0.3535534  0.7071068     0.1250000    0.5000000        0       1      0.5 #> 12   0.0000000  0.0000000     0.0000000    0.0000000        1       1      1.0 #>    cov.max beta.range cov.range count #> 1        2        1.0         1     3 #> 2        2        0.5         1     2 #> 3        3        0.0         1     2 #> 4        2        1.0         0     2 #> 5        1        0.0         0     1 #> 6        2        1.0         1     2 #> 7        2        0.0         0     1 #> 8        2        1.0         1     2 #> 9       NA         NA        NA    NA #> 10       2        0.0         1     2 #> 11       2        0.5         1     2 #> 12       1        0.0         0     1 summarize_regions(   bedfiles,   regions,   fun = c(\"mean\", \"stddev\"),   columns = c(4, 5),   col_names = c(\"beta\", \"cov\") ) #> [19:13:25.414359] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.414374] [iscream::summarize_regions] [info] using mean, stddev #> [19:13:25.414376] [iscream::summarize_regions] [info] with columns 4, 5 as beta, cov #>       feature file beta.mean cov.mean beta.stddev cov.stddev #> 1    chr1:1-6    a 0.6666667 1.333333   0.5773503  0.5773503 #> 2   chr1:7-10    a 0.2500000 1.500000   0.3535534  0.7071068 #> 3  chr1:11-14    a 1.0000000 2.500000   0.0000000  0.7071068 #> 4    chr1:1-6    b 0.5000000 2.000000   0.7071068  0.0000000 #> 5   chr1:7-10    b 1.0000000 1.000000   0.0000000  0.0000000 #> 6  chr1:11-14    b 0.5000000 1.500000   0.7071068  0.7071068 #> 7    chr1:1-6    c 1.0000000 2.000000   0.0000000  0.0000000 #> 8   chr1:7-10    c 0.5000000 1.500000   0.7071068  0.7071068 #> 9  chr1:11-14    c        NA       NA          NA         NA #> 10   chr1:1-6    d 1.0000000 1.500000   0.0000000  0.7071068 #> 11  chr1:7-10    d 0.2500000 1.500000   0.3535534  0.7071068 #> 12 chr1:11-14    d 1.0000000 1.000000   0.0000000  0.0000000 names(regions) <- c(\"A\", \"B\", \"C\") summarize_regions(bedfiles, regions, fun = \"sum\", columns = 5, col_names = \"coverage\") #> [19:13:25.418929] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [19:13:25.418941] [iscream::summarize_regions] [info] using sum #> [19:13:25.418944] [iscream::summarize_regions] [info] with columns 5 as coverage #>    feature file coverage.sum #> 1        A    a            4 #> 2        B    a            3 #> 3        C    a            5 #> 4        A    b            4 #> 5        B    b            1 #> 6        C    b            3 #> 7        A    c            2 #> 8        B    c            3 #> 9        C    c           NA #> 10       A    d            3 #> 11       B    d            3 #> 12       C    d            1"},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":null,"dir":"Reference","previous_headings":"","what":"Query lines from a tabixed BED file — tabix","title":"Query lines from a tabixed BED file — tabix","text":"Query lines tabixed BED file","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query lines from a tabixed BED file — tabix","text":"","code":"tabix(   bedfiles,   regions,   aligner = NULL,   col.names = NULL,   zero_based = TRUE,   raw = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query lines from a tabixed BED file — tabix","text":"bedfiles bedfiles queried regions vector, data frame GenomicRanges genomic regions. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". set result data.table's column names based argument. col.names vector column names data columns result.table, including \"chr\", \"start\", \"end\". Set BED file supported aligners general BED file. zero_based Whether input BED file zero-based start column - used coverting result data frame GenomicRanges. raw Set true give named list raw strings regions style Rsamtools::scanTabix instead data.table nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query lines from a tabixed BED file — tabix","text":"data frame GRanges input GRanges.","code":""},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"query-method","dir":"Reference","previous_headings":"","what":"Query method","title":"Query lines from a tabixed BED file — tabix","text":"'iscream two methods query records BED files: tabix shell executable: fast since output can redirected file (data.table::fread() can read) instead allocate memory store query iscream's tabix implementation, based tabix executable using htslib, slower large queries since stores records found instead writing file. However able store regions records independently instead single file used make_mat(), make_bsseq_mat(), summarize_regions(). iscream attached, checks tabix executable available Sys.() , available, sets options(\"tabix.method\" = \"shell\"). tabix() uses tabix executable make queries, except raw = TRUE. tabix found, iscream uses tabix implementation. use iscream's tabix implementation, set options(\"tabix.method\" = \"htslib\").","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"input-region-formats","dir":"Reference","previous_headings":"","what":"Input region formats","title":"Query lines from a tabixed BED file — tabix","text":"input regions may string vector form \"chr:start-end\", dataframe \"chr\", \"start\" \"end\" columns GRanges object. Input regions must 1-based.  input GRanges, output also GRanges associated metadata columns (joined onto result using GenomicRanges::findOverlaps()). making GRanges, 0-based records BED-files converted 1-based GenomicRanges::makeGRangesFromDataFrame(). Bismark's coverage files converted already 1-based ranges slot one position.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query lines from a tabixed BED file — tabix","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") tabix(bedfiles[1], regions, col.names = c(\"beta\", \"coverage\")) #>       chr start   end  beta coverage #>    <char> <int> <int> <num>    <int> #> 1:   chr1     0     2   1.0        1 #> 2:   chr1     2     4   1.0        1 #> 3:   chr1     4     6   0.0        2 #> 4:   chr1     6     8   0.0        1 #> 5:   chr1     8    10   0.5        2 #> 6:   chr1    10    12   1.0        2 #> 7:   chr1    12    14   1.0        3"},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate provided logging level — validate_log_level","title":"Validate provided logging level — validate_log_level","text":"\"info\" \"debug\" currently supported, \"debug\" supported using 1 thread","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate provided logging level — validate_log_level","text":"","code":"validate_log_level(level = get_log_level(), n_threads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate provided logging level — validate_log_level","text":"level logging level validate n_threads number threads next iscream function call use","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate provided logging level — validate_log_level","text":"None; sets log level provide level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate provided logging level — validate_log_level","text":"","code":"set_log_level(\"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate provided aligner — verify_aligner_or_stop","title":"Validate provided aligner — verify_aligner_or_stop","text":"\"biscuit\", \"bismark\", \"bsbolt\" currently supported","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate provided aligner — verify_aligner_or_stop","text":"","code":"verify_aligner_or_stop(aligner)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate provided aligner — verify_aligner_or_stop","text":"aligner input alinger","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate provided aligner — verify_aligner_or_stop","text":"true; quits input among supported_aligners","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that bedfiles are tabixed — verify_files_or_stop","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"Verify bedfiles tabixed","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"","code":"verify_files_or_stop(bedfiles, verify_tabix = TRUE)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"bedfiles vector bedfile paths verify_tabix Whether verify presence tabix files","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"Verify input bedfiles type specified input aligner","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"","code":"verify_filetype(bedfiles, aligner, stop_on_error = FALSE)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"bedfiles vector bedfile paths aligner aligner chosen stop_on_error Whether warn stop aligner-filename mismatch","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""}]
