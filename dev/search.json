[{"path":"https://huishenlab.github.io/iscream/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 iscream authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"get-the-transcription-start-sites-and-flanking-regions","dir":"Articles","previous_headings":"","what":"Get the Transcription start sites and flanking regions","title":"Plotting TSS methylation profiles","text":"read provided TSS BED file create 2kb flanking regions around start sites.","code":"tss.regions <- fread(     \"../data/methscan/Mus_musculus.GRCm38.102_TSS.bed\", drop = c(3, 5, 6) ) colnames(tss.regions) <- c(\"chr\", \"tss\", \"geneID\") head(tss.regions) ##       chr     tss             geneID ##    <char>   <int>             <char> ## 1:      1 3671498 ENSMUSG00000051951 ## 2:      1 4409241 ENSMUSG00000025900 ## 3:      1 4496413 ENSMUSG00000025902 ## 4:      1 4785739 ENSMUSG00000033845 ## 5:      1 4807823 ENSMUSG00000025903 ## 6:      1 4857814 ENSMUSG00000033813 tss.regions[, `:=`(tss.start = tss - 2000, tss.end = tss + 2000)]  # make a new data frame with chr, start, end as iscream requires these columns tss.for_query <- tss.regions[, .(chr, start = tss.start, end = tss.end)]"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"make-a-tabix-query-of-the-tss-flanking-regions","dir":"Articles","previous_headings":"","what":"Make a tabix query of the TSS flanking regions","title":"Plotting TSS methylation profiles","text":"tabix() function queries provided BED files TSS flanking regions produce data frame:","code":"query_runtime.start <- proc.time() tss.query <- tabix(bedfiles, tss.for_query, aligner = \"bismark\") head(tss.query) ##       chr   start     end methylation.percentage count.methylated ##    <char>   <int>   <int>                  <num>            <int> ## 1:      1 4785488 4785488                      0                0 ## 2:      1 4785513 4785513                      0                0 ## 3:      1 4785522 4785522                      0                0 ## 4:      1 4785533 4785533                      0                0 ## 5:      1 4786780 4786780                    100                1 ## 6:      1 4786886 4786886                    100                1 ##    count.unmethylated  sample ##                 <int>  <char> ## 1:                  2 cell_01 ## 2:                  2 cell_01 ## 3:                  2 cell_01 ## 4:                  2 cell_01 ## 5:                  0 cell_01 ## 6:                  0 cell_01"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"summarize-average-methylation-profile-around-tss","dir":"Articles","previous_headings":"","what":"Summarize average methylation profile around TSS","title":"Plotting TSS methylation profiles","text":"Given CpG level methylation data frame, now join queried data based CpGs fall within TSS flanking regions get CpGs 2kb around TSS. can also set new position column relative TSS (using rounded values methscan tutorial): Time make query compute summary: 2.184s elapsed (4.409s cpu).","code":"# join tss.profile <- tss.regions[tss.query, .(     chr,     start,     position = round(start - tss, -1L),     methylation.percentage,     sample   ),   on = .(chr, tss.start <= start, tss.end >= end) ] |> unique()  # get mean methylation by relative position and cell tss.summary <- tss.profile[,   .(meth_frac = mean(methylation.percentage/100)),   by = .(position, sample) ]  query_runtime <- timetaken(query_runtime.start)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"plot-average-methylation-profiles-around-the-tss","dir":"Articles","previous_headings":"","what":"Plot average methylation profiles around the TSS","title":"Plotting TSS methylation profiles","text":"TSS profiles Total runtime, getting bedfiles regions making query, calculating summaries plotting: 2.225s elapsed (4.447s cpu). methscan, generating TSS methylation profiles alone took 11 seconds.","code":"tss.plot <- ggplot(tss.summary, aes(x = position / 1000, y = meth_frac)) +   scale_y_continuous(     labels=scales::percent_format(accuracy=1),     limits=c(0, 1), breaks=c(0, .5, 1)   ) +   geom_line(linewidth = .1) +   facet_wrap(~sample) +   labs(x = \"position relative to TSS [kb]\", y = \"DNA methylation\")  total_runtime <- timetaken(start_time)  tss.plot"},{"path":"https://huishenlab.github.io/iscream/dev/articles/TSS.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Plotting TSS methylation profiles","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS/LAPACK: /nix/store/p2a6x92n2gwljav85zz3hzid1nk7iq0l-blas-3/lib/libblas.so.3;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: America/Detroit ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggplot2_3.5.1      data.table_1.15.4  iscream_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5        cli_3.6.3          knitr_1.47         rlang_1.1.4        ##  [5] xfun_0.45          highr_0.11         generics_0.1.3     labeling_0.4.3     ##  [9] RcppParallel_5.1.8 glue_1.7.0         colorspace_2.1-1   stringfish_0.16.0  ## [13] scales_1.3.0       fansi_1.0.6        grid_4.4.1         evaluate_0.24.0    ## [17] munsell_0.5.1      tibble_3.2.1       lifecycle_1.0.4    compiler_4.4.1     ## [21] dplyr_1.1.4        pkgconfig_2.0.3    Rcpp_1.0.13        farver_2.1.2       ## [25] lattice_0.22-6     R6_2.5.1           tidyselect_1.2.1   utf8_1.2.4         ## [29] pillar_1.9.0       parallelly_1.38.0  parallel_4.4.1     magrittr_2.0.3     ## [33] Matrix_1.7-0       withr_3.0.0        tools_4.4.1        gtable_0.3.5"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"granges","dir":"Articles","previous_headings":"","what":"GRanges","title":"Getting other data structures from iscream","text":"GRanges can used input iscream’s querying functions. output tabix() query_all() can also turned GRanges.","code":"library(GenomicRanges)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-tabix-queries","dir":"Articles","previous_headings":"GRanges","what":"From tabix queries","title":"Getting other data structures from iscream","text":"input already GRanges object, tabix() also return GRanges object along attached metadata. tabix() uses input findOverlaps() join input metadata queried data.","code":"tabix(bedfiles[1], regions) |> GRanges() ## GRanges object with 7 ranges and 2 metadata columns: ##       seqnames    ranges strand |      beta  coverage ##          <Rle> <IRanges>  <Rle> | <numeric> <integer> ##   [1]     chr1       0-2      * |       1.0         1 ##   [2]     chr1       2-4      * |       1.0         1 ##   [3]     chr1       4-6      * |       0.0         2 ##   [4]     chr1       6-8      * |       0.0         1 ##   [5]     chr1      8-10      * |       0.5         2 ##   [6]     chr1     10-12      * |       1.0         2 ##   [7]     chr1     12-14      * |       1.0         3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths gr <- GRanges(regions) values(gr) <- DataFrame(     gene = c(\"gene1\", \"gene2\", \"gene3\"),     some_metadata = c(\"s1\", \"s2\", \"s3\") ) gr ## GRanges object with 3 ranges and 2 metadata columns: ##     seqnames    ranges strand |        gene some_metadata ##        <Rle> <IRanges>  <Rle> | <character>   <character> ##   A     chr1       1-6      * |       gene1            s1 ##   B     chr1      7-10      * |       gene2            s2 ##   C     chr1     11-14      * |       gene3            s3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths tabix(bedfiles, gr) ## GRanges object with 20 ranges and 5 metadata columns: ##        seqnames    ranges strand |      beta  coverage      sample        gene ##           <Rle> <IRanges>  <Rle> | <numeric> <integer> <character> <character> ##    [1]     chr1       0-2      * |       1.0         1           a       gene1 ##    [2]     chr1       2-4      * |       1.0         1           a       gene1 ##    [3]     chr1       4-6      * |       0.0         2           a       gene1 ##    [4]     chr1       6-8      * |       0.0         1           a       gene2 ##    [5]     chr1      8-10      * |       0.5         2           a       gene2 ##    ...      ...       ...    ... .       ...       ...         ...         ... ##   [16]     chr1       0-2      * |       1.0         1           d       gene1 ##   [17]     chr1       2-4      * |       1.0         2           d       gene1 ##   [18]     chr1       6-8      * |       0.0         1           d       gene2 ##   [19]     chr1      8-10      * |       0.5         2           d       gene2 ##   [20]     chr1     12-14      * |       1.0         1           d       gene3 ##        some_metadata ##          <character> ##    [1]            s1 ##    [2]            s1 ##    [3]            s1 ##    [4]            s2 ##    [5]            s2 ##    ...           ... ##   [16]            s1 ##   [17]            s1 ##   [18]            s2 ##   [19]            s2 ##   [20]            s3 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-summarize_regions","dir":"Articles","previous_headings":"GRanges","what":"From summarize_regions","title":"Getting other data structures from iscream","text":"named set regions, ’ll need set_region_rownames input create GRanges object: regions vector named, pass Feature column GRanges input regions:","code":"(summary <- summarize_regions(   bedfiles,   regions,   set_region_rownames = TRUE,   fun = c(\"sum\", \"mean\")) ) ## [16:15:20.834892] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles ## [16:15:20.834959] [iscream::summarize_regions] [info] using sum, mean ##            Feature Sample coverage.sum M.sum coverage.mean    M.mean ## chr1:1-6         A      a            4     2      1.333333 0.6666667 ## chr1:7-10        B      a            3     1      1.500000 0.5000000 ## chr1:11-14       C      a            5     5      2.500000 2.5000000 ## chr1:1-6         A      b            4     2      2.000000 1.0000000 ## chr1:7-10        B      b            1     1      1.000000 1.0000000 ## chr1:11-14       C      b            3     1      1.500000 0.5000000 ## chr1:1-6         A      c            2     2      2.000000 2.0000000 ## chr1:7-10        B      c            3     1      1.500000 0.5000000 ## chr1:11-14       C      c           NA    NA            NA        NA ## chr1:1-6         A      d            3     3      1.500000 1.5000000 ## chr1:7-10        B      d            3     1      1.500000 0.5000000 ## chr1:11-14       C      d            1     1      1.000000 1.0000000 GRanges(rownames(summary), summary = summary) ## GRanges object with 12 ranges and 6 metadata columns: ##        seqnames    ranges strand | summary.Feature summary.Sample ##           <Rle> <IRanges>  <Rle> |     <character>    <character> ##    [1]     chr1       1-6      * |               A              a ##    [2]     chr1      7-10      * |               B              a ##    [3]     chr1     11-14      * |               C              a ##    [4]     chr1       1-6      * |               A              b ##    [5]     chr1      7-10      * |               B              b ##    ...      ...       ...    ... .             ...            ... ##    [8]     chr1      7-10      * |               B              c ##    [9]     chr1     11-14      * |               C              c ##   [10]     chr1       1-6      * |               A              d ##   [11]     chr1      7-10      * |               B              d ##   [12]     chr1     11-14      * |               C              d ##        summary.coverage.sum summary.M.sum summary.coverage.mean summary.M.mean ##                   <numeric>     <numeric>             <numeric>      <numeric> ##    [1]                    4             2               1.33333       0.666667 ##    [2]                    3             1               1.50000       0.500000 ##    [3]                    5             5               2.50000       2.500000 ##    [4]                    4             2               2.00000       1.000000 ##    [5]                    1             1               1.00000       1.000000 ##    ...                  ...           ...                   ...            ... ##    [8]                    3             1                   1.5            0.5 ##    [9]                   NA            NA                    NA             NA ##   [10]                    3             3                   1.5            1.5 ##   [11]                    3             1                   1.5            0.5 ##   [12]                    1             1                   1.0            1.0 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths (summary <- summarize_regions(   bedfiles,   unname(regions),   fun = c(\"sum\", \"mean\")) ) ## [16:15:20.951621] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles ## [16:15:20.951653] [iscream::summarize_regions] [info] using sum, mean ##       Feature Sample coverage.sum M.sum coverage.mean    M.mean ## 1    chr1:1-6      a            4     2      1.333333 0.6666667 ## 2   chr1:7-10      a            3     1      1.500000 0.5000000 ## 3  chr1:11-14      a            5     5      2.500000 2.5000000 ## 4    chr1:1-6      b            4     2      2.000000 1.0000000 ## 5   chr1:7-10      b            1     1      1.000000 1.0000000 ## 6  chr1:11-14      b            3     1      1.500000 0.5000000 ## 7    chr1:1-6      c            2     2      2.000000 2.0000000 ## 8   chr1:7-10      c            3     1      1.500000 0.5000000 ## 9  chr1:11-14      c           NA    NA            NA        NA ## 10   chr1:1-6      d            3     3      1.500000 1.5000000 ## 11  chr1:7-10      d            3     1      1.500000 0.5000000 ## 12 chr1:11-14      d            1     1      1.000000 1.0000000 GRanges(summary$Feature, summary = summary[, -1]) ## GRanges object with 12 ranges and 5 metadata columns: ##        seqnames    ranges strand | summary.Sample summary.coverage.sum ##           <Rle> <IRanges>  <Rle> |    <character>            <numeric> ##    [1]     chr1       1-6      * |              a                    4 ##    [2]     chr1      7-10      * |              a                    3 ##    [3]     chr1     11-14      * |              a                    5 ##    [4]     chr1       1-6      * |              b                    4 ##    [5]     chr1      7-10      * |              b                    1 ##    ...      ...       ...    ... .            ...                  ... ##    [8]     chr1      7-10      * |              c                    3 ##    [9]     chr1     11-14      * |              c                   NA ##   [10]     chr1       1-6      * |              d                    3 ##   [11]     chr1      7-10      * |              d                    3 ##   [12]     chr1     11-14      * |              d                    1 ##        summary.M.sum summary.coverage.mean summary.M.mean ##            <numeric>             <numeric>      <numeric> ##    [1]             2               1.33333       0.666667 ##    [2]             1               1.50000       0.500000 ##    [3]             5               2.50000       2.500000 ##    [4]             2               2.00000       1.000000 ##    [5]             1               1.00000       1.000000 ##    ...           ...                   ...            ... ##    [8]             1                   1.5            0.5 ##    [9]            NA                    NA             NA ##   [10]             3                   1.5            1.5 ##   [11]             1                   1.5            0.5 ##   [12]             1                   1.0            1.0 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"making-summarizedexperiment-objects","dir":"Articles","previous_headings":"","what":"Making SummarizedExperiment objects","title":"Getting other data structures from iscream","text":"","code":"library(\"SummarizedExperiment\")"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"from-query_all-matrices","dir":"Articles","previous_headings":"Making SummarizedExperiment objects","what":"From query_all matrices","title":"Getting other data structures from iscream","text":"","code":"(mats <- query_all(bedfiles, regions)) ## [16:15:23.282084] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles ##  ## [16:15:23.282567] [iscream::query_all] [info] Creating metadata vectors ## [16:15:23.282615] [iscream::query_all] [info] nrows 10000 - 9993 extra rows allocated with 0 resizes ## [16:15:23.282619] [iscream::query_all] [info] Creating dense matrix ## $M ##      a b c d ## [1,] 1 0 0 1 ## [2,] 1 0 2 2 ## [3,] 0 2 0 0 ## [4,] 0 1 0 0 ## [5,] 1 0 1 1 ## [6,] 2 0 0 0 ## [7,] 3 1 0 1 ##  ## $Cov ##      a b c d ## [1,] 1 2 0 1 ## [2,] 1 0 2 2 ## [3,] 2 2 0 0 ## [4,] 1 1 2 1 ## [5,] 2 0 1 2 ## [6,] 2 2 0 0 ## [7,] 3 1 0 1 ##  ## $pos ## [1]  0  2  4  6  8 10 12 ##  ## $chr ## [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" ##  ## $sampleNames ## [1] \"a\" \"b\" \"c\" \"d\" (mats.sparse <- query_all(bedfiles, regions, sparse = TRUE)) ## [16:15:23.283837] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles ##  ## [16:15:23.284313] [iscream::query_all] [info] Creating metadata vectors ## [16:15:23.284342] [iscream::query_all] [info] nrows 10000 - 9993 extra rows allocated with 0 resizes ## [16:15:23.284352] [iscream::query_all] [info] Creating sparse matrix ## $M ## 7 x 4 sparse Matrix of class \"dgCMatrix\" ##      a b c d ## [1,] 1 . . 1 ## [2,] 1 . 2 2 ## [3,] . 2 . . ## [4,] . 1 . . ## [5,] 1 . 1 1 ## [6,] 2 . . . ## [7,] 3 1 . 1 ##  ## $Cov ## 7 x 4 sparse Matrix of class \"dgCMatrix\" ##      a b c d ## [1,] 1 2 . 1 ## [2,] 1 . 2 2 ## [3,] 2 2 . . ## [4,] 1 1 2 1 ## [5,] 2 . 1 2 ## [6,] 2 2 . . ## [7,] 3 1 . 1 ##  ## $pos ## [1]  0  2  4  6  8 10 12 ##  ## $chr ## [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" ##  ## $sampleNames ## [1] \"a\" \"b\" \"c\" \"d\" gr <- GRanges(mats$chr, mats$pos)  # dense SummarizedExperiment(assays = list(M = mats$M, Cov = mats$Cov), rowRanges = gr) ## class: RangedSummarizedExperiment  ## dim: 7 4  ## metadata(0): ## assays(2): M Cov ## rownames: NULL ## rowData names(0): ## colnames(4): a b c d ## colData names(0): # sparse SummarizedExperiment(   assays = list(M = mats.sparse$M, Cov = mats.sparse$Cov),   rowRanges = gr ) ## class: RangedSummarizedExperiment  ## dim: 7 4  ## metadata(0): ## assays(2): M Cov ## rownames: NULL ## rowData names(0): ## colnames(4): a b c d ## colData names(0):"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"making-bsseq-objects","dir":"Articles","previous_headings":"","what":"Making BSseq objects","title":"Getting other data structures from iscream","text":"BSseq object type SummarizedExperiment, handle sparse matrices:","code":"library(bsseq) do.call(BSseq, mats)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/data_structures.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Getting other data structures from iscream","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SummarizedExperiment_1.36.0 Biobase_2.66.0              ##  [3] MatrixGenerics_1.18.1       matrixStats_1.5.0           ##  [5] GenomicRanges_1.58.0        GenomeInfoDb_1.42.3         ##  [7] IRanges_2.40.1              S4Vectors_0.44.0            ##  [9] BiocGenerics_0.52.0         iscream_0.0.0.9000          ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.9              SparseArray_1.6.2       lattice_0.22-6          ##  [4] digest_0.6.37           evaluate_1.0.3          grid_4.4.2              ##  [7] fastmap_1.2.0           jsonlite_1.9.0          Matrix_1.7-1            ## [10] httr_1.4.7              UCSC.utils_1.2.0        textshaping_1.0.0       ## [13] jquerylib_0.1.4         abind_1.4-8             cli_3.6.4               ## [16] rlang_1.1.5             crayon_1.5.3            XVector_0.46.0          ## [19] parallelly_1.42.0       cachem_1.1.0            DelayedArray_0.32.0     ## [22] yaml_2.3.10             S4Arrays_1.6.0          tools_4.4.2             ## [25] parallel_4.4.2          GenomeInfoDbData_1.2.13 R6_2.6.1                ## [28] lifecycle_1.0.4         zlibbioc_1.52.0         fs_1.6.5                ## [31] stringfish_0.16.0       ragg_1.3.3              desc_1.4.3              ## [34] pkgdown_2.1.1           RcppParallel_5.1.10     bslib_0.9.0             ## [37] data.table_1.17.0       Rcpp_1.0.14             systemfonts_1.2.1       ## [40] xfun_0.51               knitr_1.49              htmltools_0.5.8.1       ## [43] rmarkdown_2.29          compiler_4.4.2"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"loading-iscream","dir":"Articles","previous_headings":"Setup","what":"Loading iscream","title":"Getting started with iscream","text":"number threads can set loading library:","code":"options(\"iscream.threads\" = 8) library(iscream) #> iscream using 8 threads of detected 8 threads. See `?set_threads` for information on multithreading."},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"input-bed-files","dir":"Articles","previous_headings":"Setup","what":"Input BED files","title":"Getting started with iscream","text":"100 human cell WGBS data snmc-seq2 dataset:","code":"bedfiles <- list.files(   \"../data/snmcseq2\",   pattern = \"*.bed.gz$\",   full.names = TRUE )[1:100]"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"regions","dir":"Articles","previous_headings":"Setup","what":"Regions","title":"Getting started with iscream","text":"Since iscream region-based querying tool, need load regions. ’ll using 5000 gene body regions input:","code":"library(data.table) regions <- fread(   \"../data/genes.bed\",   col.names = c(\"chr\", \"start\", \"end\", \"gene\") )[1:5000] head(regions) #>       chr    start      end   gene #>    <char>    <int>    <int> <char> #> 1:   chr1  1471764  1497848 ATAD3B #> 2:   chr1  3069167  3438621 PRDM16 #> 3:   chr1  2403963  2413797  PEX10 #> 4:   chr1 10472287 10630758  PEX14 #> 5:   chr1  2425979  2505532  PLCH2 #> 6:   chr1  9292893  9369532  SPSB1"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"make-tabix-queries","dir":"Articles","previous_headings":"Running iscream","what":"Make tabix queries","title":"Getting started with iscream","text":"tabix() function can used query regions BED files much like tabix shell command. returns queried lines BED files, parsed columns, data.table. tabix() generic BED files query function restricted methylation BED files. built-support BISCUIT, Bismark, BSbolt BED file column names, set aligner argument, can take column names colnames argument. multiple input files provided, queried parallel. raw = TRUE, tabix() return data Rsamtools::scanTabix() - named list strings.","code":"system.time(tbx_query <- tabix(bedfiles, regions)) #>    user  system elapsed  #>  35.363   4.769  10.853 tbx_query #>              chr     start       end  beta coverage          sample #>           <char>     <int>     <int> <num>    <int>          <char> #>        1:   chr1    923949    923950 0.000        1 bisc_SRR6911624 #>        2:   chr1    923953    923954 0.000        1 bisc_SRR6911624 #>        3:   chr1    923959    923960 0.000        1 bisc_SRR6911624 #>        4:   chr1    923971    923972 0.000        1 bisc_SRR6911624 #>        5:   chr1    923973    923974 0.000        1 bisc_SRR6911624 #>       ---                                                           #> 45729764:   chr4 190179369 190179370 0.000        2 bisc_SRR6911723 #> 45729765:   chr4 190179686 190179687 1.000        1 bisc_SRR6911723 #> 45729766:   chr4 190179687 190179688 0.500        2 bisc_SRR6911723 #> 45729767:   chr4 190179753 190179754 1.000        1 bisc_SRR6911723 #> 45729768:   chr4 190179754 190179755 0.333        3 bisc_SRR6911723"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"get-summary-data","dir":"Articles","previous_headings":"Running iscream","what":"Get summary data","title":"Getting started with iscream","text":"get summary methylation information gene bodies use summarize_regions:","code":"system.time(summary_query <- summarize_regions(bedfiles, regions)) #> [12:13:24.310639] [iscream::summarize_regions] [info] Summarizing 5000 regions from 100 bedfiles #> [12:13:24.310748] [iscream::summarize_regions] [info] using sum, mean, median, stddev, variance, min, max, range, cpg_count #>    user  system elapsed  #>  27.350   0.609   5.563 head(summary_query) #>                  Feature          Sample coverage.sum M.sum coverage.mean #> 1   chr1:1471764-1497848 bisc_SRR6911624          109    95      1.101010 #> 2   chr1:3069167-3438621 bisc_SRR6911624         1470   789      1.074561 #> 3   chr1:2403963-2413797 bisc_SRR6911624           62    15      1.000000 #> 4 chr1:10472287-10630758 bisc_SRR6911624          258   200      1.011765 #> 5   chr1:2425979-2505532 bisc_SRR6911624          272   195      1.066667 #> 6   chr1:9292893-9369532 bisc_SRR6911624           74    64      1.000000 #>      M.mean coverage.median M.median coverage.stddev  M.stddev #> 1 0.9595960               1        1       0.3028757 0.4932026 #> 2 0.5767544               1        1       0.2892802 0.5888135 #> 3 0.2419355               1        0       0.0000000 0.4317514 #> 4 0.7843137               1        1       0.1080374 0.4307897 #> 5 0.7647059               1        1       0.2796698 0.5169655 #> 6 0.8648649               1        1       0.0000000 0.3442015 #>   coverage.variance M.variance coverage.min M.min coverage.max M.max #> 1        0.09173366  0.2432488            1     0            2     2 #> 2        0.08368306  0.3467014            1     0            3     3 #> 3        0.00000000  0.1864093            1     0            1     1 #> 4        0.01167207  0.1855797            1     0            2     2 #> 5        0.07821522  0.2672534            1     0            3     3 #> 6        0.00000000  0.1184746            1     0            1     1 #>   coverage.range M.range cpg_count #> 1              1       2        99 #> 2              2       3      1368 #> 3              0       1        62 #> 4              1       2       255 #> 5              2       3       255 #> 6              0       1        74"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"build-matrices","dir":"Articles","previous_headings":"Running iscream","what":"Build matrices","title":"Getting started with iscream","text":"query_all() function queries stores every CpG input regions. Unlike summarize_regions() output matrix dimensions unknown runtime. Although usually quite fast, CpG count large overlaps CpGs files, can take long time. , gene bodies large final matrix can contain millions CpGs. , single-cell data, chances new CpGs found every file. Preallocating number rows, however, can drastically reduce runtime. Since got 45 million CpGs BED files, can approximately expect 5 10 million unique CpGs single-cell data lower coverage bulk. already tabix query can get unique CpG count use preallocate matrix, reducing number matrix resizes. Making tabix queries can relatively quick way approximate CpG count dataset. haven’t done tabix query full dataset, can approximate many CpGs expect based CpG counts one file coverage WGBS method. output query_all() named list containing matrices coverage values M values vectors sample names, chromosome names positions loci. list can used produce BSseq object. However since BSseq work sparse matrices, two matrices need converted dense matrices first.","code":"cpg.count <- tbx_query$start |> unique() |> length() system.time(meth_mat <- query_all(   bedfiles,   regions,   sparse = TRUE,   prealloc = cpg.count )) #> [12:13:31.961976] [iscream::query_all] [info] Querying 5000 regions from 100 bedfiles #>  #> [12:14:22.904618] [iscream::query_all] [info] Creating metadata vectors #> [12:14:23.381735] [iscream::query_all] [info] nrows 7281989 - 5882 extra rows allocated with 3 resizes #> [12:14:27.962580] [iscream::query_all] [info] Creating sparse matrix #>    user  system elapsed  #> 208.880   3.086  56.854 str(meth_mat) #> List of 5 #>  $ M          :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:32627134] 9 11 12 13 14 15 16 17 18 19 ... #>   .. ..@ p       : int [1:101] 0 157256 362760 626888 904511 1158005 1437240 1729046 2014168 2231683 ... #>   .. ..@ Dim     : int [1:2] 7276107 100 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"bisc_SRR6911624\" \"bisc_SRR6911625\" \"bisc_SRR6911626\" \"bisc_SRR6911627\" ... #>   .. ..@ x       : num [1:32627134] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ Cov        :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots #>   .. ..@ i       : int [1:43227794] 0 1 2 3 4 5 6 7 8 9 ... #>   .. ..@ p       : int [1:101] 0 217582 488919 850016 1220035 1545163 1920047 2322291 2713873 3020522 ... #>   .. ..@ Dim     : int [1:2] 7276107 100 #>   .. ..@ Dimnames:List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:100] \"bisc_SRR6911624\" \"bisc_SRR6911625\" \"bisc_SRR6911626\" \"bisc_SRR6911627\" ... #>   .. ..@ x       : num [1:43227794] 1 1 1 1 1 1 1 1 1 1 ... #>   .. ..@ factors : list() #>  $ pos        : int [1:7276107] 1472309 1472386 1472390 1472394 1472407 1472414 1472439 1472489 1472503 1473922 ... #>  $ chr        : chr [1:7276107] \"chr1\" \"chr1\" \"chr1\" \"chr1\" ... #>  $ sampleNames: chr [1:100] \"bisc_SRR6911624\" \"bisc_SRR6911625\" \"bisc_SRR6911626\" \"bisc_SRR6911627\" ... bs <- do.call(BSseq, meth_mat)"},{"path":"https://huishenlab.github.io/iscream/dev/articles/iscream.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Getting started with iscream","text":"","code":"sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: AlmaLinux 9.5 (Teal Serval) #>  #> Matrix products: default #> BLAS/LAPACK: /usr/lib64/libopenblas-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.utf8        LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.utf8      LC_MONETARY=C.UTF-8    LC_MESSAGES=C.utf8     #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] data.table_1.16.4  iscream_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] compiler_4.4.2      parallelly_1.42.0   Matrix_1.7-2        #>  [4] parallel_4.4.2      tools_4.4.2         Rcpp_1.0.14         #>  [7] grid_4.4.2          knitr_1.49          xfun_0.50           #> [10] RcppParallel_5.1.10 stringfish_0.16.0   lattice_0.22-6      #> [13] evaluate_1.0.3"},{"path":"https://huishenlab.github.io/iscream/dev/articles/manuscript_data.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Manuscript data availabiliy","text":"Two datasets used produce figure paper: snmC-seq2 scWGBS data (Luo et al. 2018) single-cell benchmarks. bulk WGBS project lab datasets aligned BISCUIT (Zhou et al. 2024). produce Bismark BEDgraph files (Krueger Andrews 2011), used python script convert beta coverage value columns percentage methylation, unmethylated reads methylated read columns. Using GNU parallel: using iscream.paper package https://github.com/huishenlab/iscream.paper ran benchmarks produced figures.","code":"import sys import gzip  bedfile = sys.argv[1]  def bed2cov(line):     chr, start, end, beta, cov = line.split('\\t')     percent, meth, unmeth = convert(float(beta), int(cov))     return '\\t'.join([chr, start, start, str(percent), str(meth), str(unmeth)])  def convert(beta, cov):     percent = round(beta * 100)     meth = round(beta * cov)     unmeth = cov - meth     return [percent, meth, unmeth]  with gzip.open(bedfile, 'rt') as bed:     for line in bed:         print(bed2cov(line)) parallel python bed2cov.py <biscuit_path>/{} '>' <bismark_path>/{/.} ::: biscuit_path/*.bed.gz"},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Eapen. Author, maintainer. Jacob Morrison. Author. Hui Shen. Thesis advisor, funder.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eapen J, Morrison J (2025). iscream: Integrating Single-Cell Results Exploring Analyzing Methylation. R package version 0.0.0.9000, https://github.com/huishenlab/iscream/, https://huishenlab.github.io/iscream/.","code":"@Manual{,   title = {iscream: Integrating Single-Cell Results for Exploring and Analyzing Methylation},   author = {James Eapen and Jacob Morrison},   year = {2025},   note = {R package version 0.0.0.9000, https://github.com/huishenlab/iscream/},   url = {https://huishenlab.github.io/iscream/}, }"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"iscream-","dir":"","previous_headings":"","what":"iscream","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"Integrating Single-Cell Results Exploring Analyzing Methylation Analysis visualization Whole Genome Bisulfite Sequencing (WGBS) data requires reading aligned sequencing data formats existing packages like BSseq scMET can analyze. Getting data -disk formats like bedfiles matrix methylation values can difficult , nearly 30 million CpGs, WGBS data can quite large. iscream aims efficiently read alinged (sc)WGBS data formats can used packages. iscream uses htslib query genomic regions make matrices BSSeq aggregate methylated reads scMET.","code":""},{"path":[]},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"htslib--119","dir":"","previous_headings":"Installation > System dependencies","what":"htslib >= 1.19","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"iscream depends htslib header files. may installed package manager: ubuntu/debian: libhts-dev fedora/RHEL: htslib-devel brew: htslib nixpkgs: htslib built manually: https://www.htslib.org/download/. header files may also found among HPC modules - make sure PKG_CONFIG_PATH environment variable includes pkgconfig location installation htslib. can verify htslib development libraries installed pkg-config:","code":"pkg-config --cflags --libs htslib"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"tabix","dir":"","previous_headings":"Installation > System dependencies > htslib >= 1.19","what":"tabix","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"htslib installations include tabix executable (Ubuntu need install libhts-dev tabix). iscream work without tabix, tabix() function faster executable installed.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"gcc","dir":"","previous_headings":"Installation > System dependencies","what":"GCC","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"GNU GCC must installed OpenMP support. usually installed default Linux systems, may need manually installed MacOS use iscream multiple threads1.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"can install development version Github cloning repo running can also use R devtools package: pak:","code":"git clone https://github.com/huishenlab/iscream R CMD INSTALL iscream devtools::install_github(\"huishenlab/iscream\") pak::pkg_install(\"huishenlab/iscream\")"},{"path":"https://huishenlab.github.io/iscream/dev/index.html","id":"usage","dir":"","previous_headings":"Installation","what":"Usage","title":"Integrating Single-Cell Results for Exploring and Analyzing Methylation","text":"user guide available package website. Bug reports may submitted GitHub issues.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Query all CpG info into M and coverage matrices — Cpp_query_all","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"Query CpG info M coverage matrices","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"","code":"Cpp_query_all(bedfiles, regions, bismark, merged, sparse, prealloc, nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query all CpG info into M and coverage matrices — Cpp_query_all","text":"bedfiles vector bedfiles regions vector regions bismark Whether input bismark coverage file prealloc number rows initialize matrices nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_chroms.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the chromosomes or seqnames from a vector of files — Cpp_query_chroms","title":"Query the chromosomes or seqnames from a vector of files — Cpp_query_chroms","text":"Query chromosomes seqnames vector files","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_chroms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the chromosomes or seqnames from a vector of files — Cpp_query_chroms","text":"","code":"Cpp_query_chroms(bedfile_vec, nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_chroms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the chromosomes or seqnames from a vector of files — Cpp_query_chroms","text":"bedfile_vec vector bedfile paths","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_chroms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the chromosomes or seqnames from a vector of files — Cpp_query_chroms","text":"vector seqnames","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reads from a single genomic region from one tabixed bed file to return as CharacterVector — Cpp_query_interval","title":"Get reads from a single genomic region from one tabixed bed file to return as CharacterVector — Cpp_query_interval","text":"Get reads single genomic region one tabixed bed file return CharacterVector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reads from a single genomic region from one tabixed bed file to return as CharacterVector — Cpp_query_interval","text":"","code":"Cpp_query_interval(bedfile, regions)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_query_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reads from a single genomic region from one tabixed bed file to return as CharacterVector — Cpp_query_interval","text":"bedfile name bed file - must corresponding tabix file name .tbi extension regions vector region strings form \"chr:start-end\"","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"spdlog Logging Lever Setter — Cpp_set_log_level","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"helper function turn logging level given string current logging level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"","code":"Cpp_set_log_level(name)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"name string logging level. Value understood , decreasing verbosity ‘trace’, ‘debug’, ‘info’, ‘warning’, ‘error’, ‘critical’, ‘’. Unrecognised names equivalent ‘’.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_set_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spdlog Logging Lever Setter — Cpp_set_log_level","text":"Nothing returned.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over CpGs within features — Cpp_summarize_regions","title":"Apply a function over CpGs within features — Cpp_summarize_regions","text":"function called summarize_regions() since sanity checks C++ side.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over CpGs within features — Cpp_summarize_regions","text":"","code":"Cpp_summarize_regions(   bedfiles,   regions,   fun_vec,   mval,   bismark,   region_rownames = FALSE,   nthreads = 1L )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over CpGs within features — Cpp_summarize_regions","text":"bedfiles vector bedfile paths regions vector genomic regions fun_vec Vector armadillo-supported stats functions apply CpGs ' regions: \"sum\", \"mean\", \"median\", \"stddev\", \"variance\" \"cpg_count\", \"min\",\"max\", \"range\". mval Calculates M values TRUE, use beta values FALSE bismark input bismark column format instead BISCUIT region_rownames Whether set rownames regions strings. necessary regions vector unnamed. names, \"Feature\" column set names rownames set regions string nthreads Number cores use. See details.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/Cpp_summarize_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function over CpGs within features — Cpp_summarize_regions","text":"optimal number threads depends number bedfiles, set half available OpenMP cores. See ?get_threads details. can manaully set set_threads().","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that files exist — check_files_exist","title":"Check that files exist — check_files_exist","text":"Check files exist","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that files exist — check_files_exist","text":"","code":"check_files_exist(files_vec, error_file_prefix = \"Bedfile\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that files exist — check_files_exist","text":"files_vec vector file paths error_file_prefix Error message prefix 'Bedfile' vs 'Tabix file'","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_files_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that files exist — check_files_exist","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the required threads are available — check_thread_count","title":"Check that the required threads are available — check_thread_count","text":"Check required threads available","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the required threads are available — check_thread_count","text":"","code":"check_thread_count(   n_threads,   avail_threads = availableCores(),   opt_set = FALSE )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the required threads are available — check_thread_count","text":"n_threads number threads check availability avail_threads number threads available system. Defaults parallelly::availableCores() opt_set Whether iscream.threads options set","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/check_thread_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the required threads are available — check_thread_count","text":"n_threads requested number threads available stops ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta value decoder — decode_beta","title":"Beta value decoder — decode_beta","text":"Beta value decoder","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta value decoder — decode_beta","text":"","code":"decode_beta(encoded)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta value decoder — decode_beta","text":"encoded bit-packed beta cov Int","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta value decoder — decode_beta","text":"beta value","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Coverage value decoder — decode_cov","title":"Coverage value decoder — decode_cov","text":"Coverage value decoder","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coverage value decoder — decode_cov","text":"","code":"decode_cov(encoded)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coverage value decoder — decode_cov","text":"encoded bit-packed beta cov Int","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/decode_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coverage value decoder — decode_cov","text":"coverage value","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/dot-get_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of threads to use in functions from param or option — .get_threads","title":"Get the number of threads to use in functions from param or option — .get_threads","text":"Get number threads use functions param option","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/dot-get_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of threads to use in functions from param or option — .get_threads","text":"","code":".get_threads(nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Get beta values from bit-packed dense matrix — get_beta","title":"Get beta values from bit-packed dense matrix — get_beta","text":"Get beta values bit-packed dense matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get beta values from bit-packed dense matrix — get_beta","text":"","code":"get_beta(m, nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get beta values from bit-packed sparse matrix — get_beta_sparse","title":"Get beta values from bit-packed sparse matrix — get_beta_sparse","text":"Get beta values bit-packed sparse matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get beta values from bit-packed sparse matrix — get_beta_sparse","text":"","code":"get_beta_sparse(m)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get beta values from bit-packed sparse matrix — get_beta_sparse","text":"m bit-packed dgcMatrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_beta_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get beta values from bit-packed sparse matrix — get_beta_sparse","text":"beta value","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coverage values from bit-packed dense matrix — get_cov","title":"Get coverage values from bit-packed dense matrix — get_cov","text":"Get coverage values bit-packed dense matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coverage values from bit-packed dense matrix — get_cov","text":"","code":"get_cov(m, nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_cov_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coverage values from bit-packed sparse matrix — get_cov_sparse","title":"Get coverage values from bit-packed sparse matrix — get_cov_sparse","text":"Get coverage values bit-packed sparse matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_cov_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coverage values from bit-packed sparse matrix — get_cov_sparse","text":"","code":"get_cov_sparse(m)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":null,"dir":"Reference","previous_headings":"","what":"DataFrame to region strings — get_df_string","title":"DataFrame to region strings — get_df_string","text":"Convert DataFrame vector strings. Set feature names \"name\" column","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataFrame to region strings — get_df_string","text":"","code":"get_df_string(regions_df)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataFrame to region strings — get_df_string","text":"regions_df data frame \"chr\", \"start\" \"end\" columns","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_df_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DataFrame to region strings — get_df_string","text":"character vector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":null,"dir":"Reference","previous_headings":"","what":"GRanges to region strings — get_granges_string","title":"GRanges to region strings — get_granges_string","text":"Convert GRanges object vector strings","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRanges to region strings — get_granges_string","text":"","code":"get_granges_string(gr, sep = c(\":\", \"-\"))"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GRanges to region strings — get_granges_string","text":"gr GRanges object sep Vector separators use genomic string. First element used separate chromosome coordinates, second separator used separate start end coordinates.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GRanges to region strings — get_granges_string","text":"character vector","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_granges_string.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GRanges to region strings — get_granges_string","text":"function adapted stuart-lab/signac.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current log level — get_log_level","title":"Get the current log level — get_log_level","text":"Can handle spdlogs levels, iscream functions supports \"info\" \"debug\"","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current log level — get_log_level","text":"","code":"get_log_level()"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current log level — get_log_level","text":"current logging level string","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Get M values from bit-packed dense matrix — get_m","title":"Get M values from bit-packed dense matrix — get_m","text":"Get M values bit-packed dense matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get M values from bit-packed dense matrix — get_m","text":"","code":"get_m(m, nthreads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_m_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get M values from bit-packed sparse matrix — get_m_sparse","title":"Get M values from bit-packed sparse matrix — get_m_sparse","text":"Get M values bit-packed sparse matrix","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_m_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get M values from bit-packed sparse matrix — get_m_sparse","text":"","code":"get_m_sparse(m)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_omp_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of available threads from OpenMP. — get_omp_threads","title":"Get the number of available threads from OpenMP. — get_omp_threads","text":"queries number available threads usign OpenMP, reliably provide accurate available thread count. get reliable count accounts environment variables HPC schedulers, use get_threads()`. function pulled github.com/rdatatable/data.table","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_omp_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of available threads from OpenMP. — get_omp_threads","text":"","code":"get_omp_threads(verbose)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_omp_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of available threads from OpenMP. — get_omp_threads","text":"verbose Whether verbose available omp threads","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_omp_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of available threads from OpenMP. — get_omp_threads","text":"","code":"get_omp_threads(verbose = TRUE) #>   OpenMP version (_OPENMP)       201511 #>   omp_get_num_procs()            4 #>   omp_get_thread_limit()         2147483647 #>   omp_get_max_threads()          4 #> [1] 4"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of available threads — get_threads","title":"Get the number of available threads — get_threads","text":"Gets number threads iscream currently set use, whether \"iscream.threads\" option set many threads available use. set number threads use set_threads() set iscream.threads option ~/.Rprofile. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of available threads — get_threads","text":"","code":"get_threads()"},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of available threads — get_threads","text":"named vector: use_threads = number threads iscream use opt_set = whether option set user avail_threads = number available threads reported parallelly::availableCores","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/get_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the number of available threads — get_threads","text":"","code":"get_threads() #>   use_threads       opt_set avail_threads  #>             1             1             4"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Query all CpGs from input genomic regions — query_all","title":"Query all CpGs from input genomic regions — query_all","text":"Queries provided regions produces M/beta Coverage matrices genomic positions. Parallelized across files using threads \"iscream.threads\" option. output query_all may used create BSseq object: .call(BSseq, query_all(...)).","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query all CpGs from input genomic regions — query_all","text":"","code":"query_all(   bedfiles,   regions,   aligner = \"biscuit\",   mval = TRUE,   merged = TRUE,   sparse = FALSE,   prealloc = 10000,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query all CpGs from input genomic regions — query_all","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". mval Whether return M-values beta-values coverage matrix. Defaults M-value. Set mval=FALSE get beta value matrix. merged Whether input strands merged/collapsed sparse Whether return M coverage matrices sparse matrices (\"dgCMatrix\"). Set TRUE scWGBS data prealloc number rows initialize matrices . number methyltion loci approximately known, can reduce runtime fewer resizes need made. nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query all CpGs from input genomic regions — query_all","text":"named list coverage either beta- M-value matrix character vector chromosomes numeric vector corresponding CpG base positions character vector input sample names","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query all CpGs from input genomic regions — query_all","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query all CpGs from input genomic regions — query_all","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") query_all(bedfiles, regions) #> [16:15:05.082056] [iscream::query_all] [info] Querying 3 regions from 4 bedfiles #>  #> [16:15:05.082510] [iscream::query_all] [info] Creating metadata vectors #> [16:15:05.082566] [iscream::query_all] [info] nrows 10000 - 9993 extra rows allocated with 0 resizes #> [16:15:05.082572] [iscream::query_all] [info] Creating dense matrix #> $M #>      a b c d #> [1,] 1 0 0 1 #> [2,] 1 0 2 2 #> [3,] 0 2 0 0 #> [4,] 0 1 0 0 #> [5,] 1 0 1 1 #> [6,] 2 0 0 0 #> [7,] 3 1 0 1 #>  #> $Cov #>      a b c d #> [1,] 1 2 0 1 #> [2,] 1 0 2 2 #> [3,] 2 2 0 0 #> [4,] 1 1 2 1 #> [5,] 2 0 1 2 #> [6,] 2 2 0 0 #> [7,] 3 1 0 1 #>  #> $pos #> [1]  0  2  4  6  8 10 12 #>  #> $chr #> [1] \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" \"chr1\" #>  #> $sampleNames #> [1] \"a\" \"b\" \"c\" \"d\" #>  # for BSseq object run if (FALSE) { # \\dontrun{ library(bsseq) do.call(BSseq, query_all(bedfiles, regions)) } # }"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the chromosomes or seqnames from a vector of files — query_chroms","title":"Query the chromosomes or seqnames from a vector of files — query_chroms","text":"Query chromosomes seqnames vector files","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the chromosomes or seqnames from a vector of files — query_chroms","text":"","code":"query_chroms(bedfiles, nthreads = NULL)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the chromosomes or seqnames from a vector of files — query_chroms","text":"bedfiles vector bedfile paths nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/query_chroms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the chromosomes or seqnames from a vector of files — query_chroms","text":"vector seqnames","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/scan_tabix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get namde list of reads from a single genomic region from one tabixed bed file — scan_tabix","title":"Get namde list of reads from a single genomic region from one tabixed bed file — scan_tabix","text":"Get namde list reads single genomic region one tabixed bed file","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/scan_tabix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get namde list of reads from a single genomic region from one tabixed bed file — scan_tabix","text":"","code":"scan_tabix(bedfile, regions)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/scan_tabix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get namde list of reads from a single genomic region from one tabixed bed file — scan_tabix","text":"bedfile name bed file - must corresponding tabix file name .tbi extension regions vector region strings form \"chr:start-end\"","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Set logging level — set_log_level","title":"Set logging level — set_log_level","text":"Set logging level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set logging level — set_log_level","text":"","code":"set_log_level(level = \"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set logging level — set_log_level","text":"level logging verbosity level use \"info\": default gives provides basic information number files regions used function \"debug\": verbose row allocations, many CpGs found region, filename parsing etc. mode used one thread R output messages multiple threads without crashing.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set logging level — set_log_level","text":"None; sets log level provided level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set logging level — set_log_level","text":"","code":"set_log_level(\"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the number of available threads — set_threads","title":"Set the number of available threads — set_threads","text":"Sets \"iscream.threads\" option n_threads. see many threads available see ?get_threads().","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the number of available threads — set_threads","text":"","code":"set_threads(n_threads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the number of available threads — set_threads","text":"n_threads number threads use","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the number of available threads — set_threads","text":"NULL. Sets iscream.threads option requested number threads available","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the number of available threads — set_threads","text":"iscream uses OpenMP parallelize certain functions. can use many threads available system varying degrees performance improvements. get_threads() function uses parallelly::availableCores() report number available threads. Although OpenMP can detect number available cores, high preformance computers (HPCs) resource allocating job schedulers like SLURM, OpenMP may detect available threads across HPC limit cores allocated scheduler. system administrator set limits, may result job taking resources jobs. limits, trying use threads available reduce iscream's performance. Job schedulers typically environment variable (e.g. SLURM_CPUS_ON_NODE SLURM) gives actual number available cores. , hyperthreaded systems, count may double available processors. Using hyperthreading guarantee performance improvement - may better set number threads half reported number. parallelly::availableCores() takes HPC scheduler/CRAN/Bioconductor limits account reporting number available threads may reliably report hyperthreading ('system' 'nproc'). set number threads without call set_threads() every session, put   .Rprofile See help('Rprofile') information startup options. Functions currently using multithreading: tabix() query_chroms() query_all() summarize_regions()","code":"options(iscream.threads = [n_threads])"},{"path":"https://huishenlab.github.io/iscream/dev/reference/set_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the number of available threads — set_threads","text":"","code":"(ncores <- parallelly::availableCores()) #> system  #>      4  if (FALSE) { # \\dontrun{ set_threads(ncores) } # }"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize CpGs methylation information over genomic regions — summarize_regions","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"Run summarizing functions CpGs bedfiles across genomic regions. Parallelized across files using threads \"iscream.threads\" option.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"","code":"summarize_regions(   bedfiles,   regions,   fun = \"all\",   aligner = \"biscuit\",   mval = TRUE,   set_region_rownames = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"bedfiles vector bedfile paths regions vector, data frame GenomicRanges genomic regions. See details. fun Function(s) apply region. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". mval Whether calculate M value (coverage \\(\\times \\beta\\)) use beta value applying function. set_region_rownames Use region strings returned data frame's rownames. Can useful named regions want regions strings rownames feature names. nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"data.frame","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"input regions may string vector form \"chr:start-end\" GRanges object. data frame provided, must \"chr\", \"start\", \"end\" columns. string vector GenomicRanges inputs named, names used describe feature output dataframe. input dataframes 'name' column, used populate output's feature column. Supported fun arguments given . functions, setting mval = FALSE use beta values instead M value: Sum: \"sum\" Mean: \"mean\" Median: \"median\" Standard deviation: \"stddev\" Variance: \"variance\" Minimum: \"min\" Maximum: \"max\" Range: \"range\" . CpGs region: \"cpg_count\" summarizing computations backed Armadillo library. See https://arma.sourceforge.net/docs.html#stats_fns futher details supported functions","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/summarize_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize CpGs methylation information over genomic regions — summarize_regions","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) # examine the bedfiles colnames <- c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\") lapply(bedfiles, function(i) knitr::kable(read.table(i, col.names = colnames))) #> [[1]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        1| #> |chr1 |     4|   6|  0.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    10|  12|  1.0|        2| #> |chr1 |    12|  14|  1.0|        3| #>  #> [[2]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|    0|        2| #> |chr1 |     4|   6|    1|        2| #> |chr1 |     6|   8|    1|        1| #> |chr1 |    10|  12|    0|        2| #> |chr1 |    12|  14|    1|        1| #>  #> [[3]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     2|   4|    1|        2| #> |chr1 |     6|   8|    0|        2| #> |chr1 |     8|  10|    1|        1| #>  #> [[4]] #>  #>  #> |chr  | start| end| beta| coverage| #> |:----|-----:|---:|----:|--------:| #> |chr1 |     0|   2|  1.0|        1| #> |chr1 |     2|   4|  1.0|        2| #> |chr1 |     6|   8|  0.0|        1| #> |chr1 |     8|  10|  0.5|        2| #> |chr1 |    12|  14|  1.0|        1| #>   # make a vector of regions regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") summarize_regions(bedfiles, regions) #> [16:15:14.296370] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [16:15:14.296387] [iscream::summarize_regions] [info] using sum, mean, median, stddev, variance, min, max, range, cpg_count #>       Feature Sample coverage.sum M.sum coverage.mean    M.mean coverage.median #> 1    chr1:1-6      a            4     2      1.333333 0.6666667             1.0 #> 2   chr1:7-10      a            3     1      1.500000 0.5000000             1.5 #> 3  chr1:11-14      a            5     5      2.500000 2.5000000             2.5 #> 4    chr1:1-6      b            4     2      2.000000 1.0000000             2.0 #> 5   chr1:7-10      b            1     1      1.000000 1.0000000             1.0 #> 6  chr1:11-14      b            3     1      1.500000 0.5000000             1.5 #> 7    chr1:1-6      c            2     2      2.000000 2.0000000             2.0 #> 8   chr1:7-10      c            3     1      1.500000 0.5000000             1.5 #> 9  chr1:11-14      c           NA    NA            NA        NA              NA #> 10   chr1:1-6      d            3     3      1.500000 1.5000000             1.5 #> 11  chr1:7-10      d            3     1      1.500000 0.5000000             1.5 #> 12 chr1:11-14      d            1     1      1.000000 1.0000000             1.0 #>    M.median coverage.stddev  M.stddev coverage.variance M.variance coverage.min #> 1       1.0       0.5773503 0.5773503         0.3333333  0.3333333            1 #> 2       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 3       2.5       0.7071068 0.7071068         0.5000000  0.5000000            2 #> 4       1.0       0.0000000 1.4142136         0.0000000  2.0000000            2 #> 5       1.0       0.0000000 0.0000000         0.0000000  0.0000000            1 #> 6       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 7       2.0       0.0000000 0.0000000         0.0000000  0.0000000            2 #> 8       0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 9        NA              NA        NA                NA         NA           NA #> 10      1.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 11      0.5       0.7071068 0.7071068         0.5000000  0.5000000            1 #> 12      1.0       0.0000000 0.0000000         0.0000000  0.0000000            1 #>    M.min coverage.max M.max coverage.range M.range cpg_count #> 1      0            2     1              1       1         3 #> 2      0            2     1              1       1         2 #> 3      2            3     3              1       1         2 #> 4      0            2     2              0       2         2 #> 5      1            1     1              0       0         1 #> 6      0            2     1              1       1         2 #> 7      2            2     2              0       0         1 #> 8      0            2     1              1       1         2 #> 9     NA           NA    NA             NA      NA        NA #> 10     1            2     2              1       1         2 #> 11     0            2     1              1       1         2 #> 12     1            1     1              0       0         1 summarize_regions(bedfiles, regions, fun = c(\"mean\", \"stddev\"), mval = FALSE) #> [16:15:14.310737] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [16:15:14.310750] [iscream::summarize_regions] [info] using mean, stddev #>       Feature Sample coverage.mean beta.mean coverage.stddev beta.stddev #> 1    chr1:1-6      a      1.333333 0.6666667       0.5773503   0.5773503 #> 2   chr1:7-10      a      1.500000 0.2500000       0.7071068   0.3535534 #> 3  chr1:11-14      a      2.500000 1.0000000       0.7071068   0.0000000 #> 4    chr1:1-6      b      2.000000 0.5000000       0.0000000   0.7071068 #> 5   chr1:7-10      b      1.000000 1.0000000       0.0000000   0.0000000 #> 6  chr1:11-14      b      1.500000 0.5000000       0.7071068   0.7071068 #> 7    chr1:1-6      c      2.000000 1.0000000       0.0000000   0.0000000 #> 8   chr1:7-10      c      1.500000 0.5000000       0.7071068   0.7071068 #> 9  chr1:11-14      c            NA        NA              NA          NA #> 10   chr1:1-6      d      1.500000 1.0000000       0.7071068   0.0000000 #> 11  chr1:7-10      d      1.500000 0.2500000       0.7071068   0.3535534 #> 12 chr1:11-14      d      1.000000 1.0000000       0.0000000   0.0000000 summarize_regions(bedfiles, regions, fun = \"sum\") #> [16:15:14.314229] [iscream::summarize_regions] [info] Summarizing 3 regions from 4 bedfiles #> [16:15:14.314243] [iscream::summarize_regions] [info] using sum #>       Feature Sample coverage.sum M.sum #> 1    chr1:1-6      a            4     2 #> 2   chr1:7-10      a            3     1 #> 3  chr1:11-14      a            5     5 #> 4    chr1:1-6      b            4     2 #> 5   chr1:7-10      b            1     1 #> 6  chr1:11-14      b            3     1 #> 7    chr1:1-6      c            2     2 #> 8   chr1:7-10      c            3     1 #> 9  chr1:11-14      c           NA    NA #> 10   chr1:1-6      d            3     3 #> 11  chr1:7-10      d            3     1 #> 12 chr1:11-14      d            1     1"},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":null,"dir":"Reference","previous_headings":"","what":"Query lines from a tabixed bedfile — tabix","title":"Query lines from a tabixed bedfile — tabix","text":"Query lines tabixed bedfile","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query lines from a tabixed bedfile — tabix","text":"","code":"tabix(   bedfiles,   regions,   aligner = \"biscuit\",   col.names = NULL,   raw = FALSE,   nthreads = NULL )"},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query lines from a tabixed bedfile — tabix","text":"bedfiles bedfiles queried regions vector, data frame GenomicRanges genomic regions. See details. aligner aligner used produce BED files - one \"biscuit\", \"bismark\", \"bsbolt\". set result data.table's column names based argument. col.names vector column names result data.table. Set bedfile supported aligners general bedfile. raw Set true give named list raw strings regions style Rsamtools::scanTabix instead data.table nthreads Set number threads use overriding \"iscream.threads\" option. See ?set_threads information.","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query lines from a tabixed bedfile — tabix","text":"data.table","code":""},{"path":[]},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"query-method","dir":"Reference","previous_headings":"","what":"Query method","title":"Query lines from a tabixed bedfile — tabix","text":"'iscream two methods query records BED files: tabix shell executable: fast since output can redirected file (data.table::fread() can read) instead allocate memory store query iscream's tabix implementation, based tabix executable using htslib, slower large queries since stores records found instead writing file. However able store regions records independently instead single file used query_all() summarize_regions(). iscream attached, checks tabix executable available Sys.() , available, sets options(\"tabix.method\" = \"shell\"). tabix() uses tabix executable make queries, except raw = TRUE. tabix found, iscream uses tabix implementation. use iscream's tabix implementation, set options(\"tabix.method\" = \"htslib\").","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"input-region-formats","dir":"Reference","previous_headings":"","what":"Input region formats","title":"Query lines from a tabixed bedfile — tabix","text":"input regions may string vector form \"chr:start-end\", dataframe \"chr\", \"start\" \"end\" columns GRanges object. input GRanges, output also GRanges associated metadata columns (joined onto result using GenomicRanges::findOverlaps())","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/tabix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query lines from a tabixed bedfile — tabix","text":"","code":"bedfiles <- system.file(\"extdata\", package = \"iscream\") |>   list.files(pattern = \"[a|b|c|d].bed.gz$\", full.names = TRUE) regions <- c(\"chr1:1-6\", \"chr1:7-10\", \"chr1:11-14\") tabix(bedfiles[1], regions, col.names = c(\"chr\", \"start\", \"end\", \"beta\", \"coverage\")) #>       chr start   end  beta coverage #>    <char> <int> <int> <num>    <int> #> 1:   chr1     0     2   1.0        1 #> 2:   chr1     2     4   1.0        1 #> 3:   chr1     4     6   0.0        2 #> 4:   chr1     6     8   0.0        1 #> 5:   chr1     8    10   0.5        2 #> 6:   chr1    10    12   1.0        2 #> 7:   chr1    12    14   1.0        3"},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate provided logging level — validate_log_level","title":"Validate provided logging level — validate_log_level","text":"\"info\" \"debug\" currently supported, \"debug\" supported using 1 thread","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate provided logging level — validate_log_level","text":"","code":"validate_log_level(level = get_log_level(), n_threads)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate provided logging level — validate_log_level","text":"level logging level validate n_threads number threads next iscream function call use","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate provided logging level — validate_log_level","text":"None; sets log level provide level","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/validate_log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate provided logging level — validate_log_level","text":"","code":"set_log_level(\"info\")"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate provided aligner — verify_aligner_or_stop","title":"Validate provided aligner — verify_aligner_or_stop","text":"\"biscuit\", \"bismark\", \"bsbolt\" currently supported","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate provided aligner — verify_aligner_or_stop","text":"","code":"verify_aligner_or_stop(aligner)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate provided aligner — verify_aligner_or_stop","text":"aligner input alinger","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_aligner_or_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate provided aligner — verify_aligner_or_stop","text":"true; quits input among supported_aligners","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that bedfiles are tabixed — verify_files_or_stop","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"Verify bedfiles tabixed","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"","code":"verify_files_or_stop(bedfiles, verify_tabix = TRUE)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"bedfiles vector bedfile paths verify_tabix Whether verify presence tabix files","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_files_or_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that bedfiles are tabixed — verify_files_or_stop","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"Verify input bedfiles type specified input aligner","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"","code":"verify_filetype(bedfiles, aligner, stop_on_error = FALSE)"},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"bedfiles vector bedfile paths aligner aligner chosen stop_on_error Whether warn stop aligner-filename mismatch","code":""},{"path":"https://huishenlab.github.io/iscream/dev/reference/verify_filetype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that the input bedfiles are of the type specified by the input aligner — verify_filetype","text":"TRUE input bedfiles associated tabix index file. FALSE ","code":""}]
